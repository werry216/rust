error: cannot infer an appropriate lifetime
  --> $DIR/region-object-lifetime-in-coercion.rs:8:46
   |
LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {
   |         ----- this data with the anonymous lifetime `'_`...
LL |     let x: Box<dyn Foo + 'static> = Box::new(v);
   |                                              ^ ...is captured here...
   |
note: ...and required to be `'static` by this
  --> $DIR/region-object-lifetime-in-coercion.rs:8:37
   |
LL |     let x: Box<dyn Foo + 'static> = Box::new(v);
   |                                     ^^^^^^^^^^^
help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`
   |
LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {
   |                                 ^^
help: alternatively, set an explicit `'static` lifetime in this parameter
   |
LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {
   |         ^^^^^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/region-object-lifetime-in-coercion.rs:13:14
   |
LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {
   |         ----- this data with the anonymous lifetime `'_`...
LL |     Box::new(v)
   |              ^ ...is captured here...
   |
note: ...and required to be `'static` by this
  --> $DIR/region-object-lifetime-in-coercion.rs:13:5
   |
LL |     Box::new(v)
   |     ^^^^^^^^^^^
help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`
   |
LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {
   |                                 ^^
help: alternatively, set an explicit `'static` lifetime in this parameter
   |
LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {
   |         ^^^^^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/region-object-lifetime-in-coercion.rs:19:14
   |
LL | fn c(v: &[u8]) -> Box<dyn Foo> {
   |         ----- this data with the anonymous lifetime `'_`...
...
LL |     Box::new(v)
   |              ^ ...is captured here...
   |
note: ...and required to be `'static` by this
  --> $DIR/region-object-lifetime-in-coercion.rs:19:5
   |
LL |     Box::new(v)
   |     ^^^^^^^^^^^
help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`
   |
LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {
   |                               ^^^^

error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements
  --> $DIR/region-object-lifetime-in-coercion.rs:23:14
   |
LL |     Box::new(v)
   |              ^
   |
note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:6...
  --> $DIR/region-object-lifetime-in-coercion.rs:22:6
   |
LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {
   |      ^^
note: ...so that the expression is assignable
  --> $DIR/region-object-lifetime-in-coercion.rs:23:14
   |
LL |     Box::new(v)
   |              ^
   = note: expected `&[u8]`
              found `&'a [u8]`
note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 22:9...
  --> $DIR/region-object-lifetime-in-coercion.rs:22:9
   |
LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {
   |         ^^
note: ...so that the expression is assignable
  --> $DIR/region-object-lifetime-in-coercion.rs:23:5
   |
LL |     Box::new(v)
   |     ^^^^^^^^^^^
   = note: expected `std::boxed::Box<(dyn Foo + 'b)>`
              found `std::boxed::Box<dyn Foo>`

error: aborting due to 4 previous errors

For more information about this error, try `rustc --explain E0495`.
