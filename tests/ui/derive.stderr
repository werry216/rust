error: you are deriving `Hash` but have implemented `PartialEq` explicitly
  --> $DIR/derive.rs:18:10
   |
18 | #[derive(Hash)]
   |          ^^^^
   |
   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]
note: lint level defined here
  --> $DIR/derive.rs:6:9
   |
6  | #![deny(warnings)]
   |         ^^^^^^^^
note: `PartialEq` implemented here
  --> $DIR/derive.rs:21:1
   |
21 | / impl PartialEq for Bar {
22 | |     fn eq(&self, _: &Bar) -> bool { true }
23 | | }
   | |_^

error: you are deriving `Hash` but have implemented `PartialEq` explicitly
  --> $DIR/derive.rs:25:10
   |
25 | #[derive(Hash)]
   |          ^^^^
   |
   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]
note: `PartialEq` implemented here
  --> $DIR/derive.rs:28:1
   |
28 | / impl PartialEq<Baz> for Baz {
29 | |     fn eq(&self, _: &Baz) -> bool { true }
30 | | }
   | |_^

error: you are implementing `Hash` explicitly but have derived `PartialEq`
  --> $DIR/derive.rs:35:1
   |
35 | / impl Hash for Bah {
36 | |     fn hash<H: Hasher>(&self, _: &mut H) {}
37 | | }
   | |_^
   |
   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]
note: `PartialEq` implemented here
  --> $DIR/derive.rs:32:10
   |
32 | #[derive(PartialEq)]
   |          ^^^^^^^^^

error: you are implementing `Clone` explicitly on a `Copy` type
  --> $DIR/derive.rs:42:1
   |
42 | / impl Clone for Qux {
43 | |     fn clone(&self) -> Self { Qux }
44 | | }
   | |_^
   |
   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]
note: lint level defined here
  --> $DIR/derive.rs:6:9
   |
6  | #![deny(warnings)]
   |         ^^^^^^^^
note: consider deriving `Clone` or removing `Copy`
  --> $DIR/derive.rs:42:1
   |
42 | / impl Clone for Qux {
43 | |     fn clone(&self) -> Self { Qux }
44 | | }
   | |_^

error: you are implementing `Clone` explicitly on a `Copy` type
  --> $DIR/derive.rs:66:1
   |
66 | / impl<'a> Clone for Lt<'a> {
67 | |     fn clone(&self) -> Self { unimplemented!() }
68 | | }
   | |_^
   |
   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]
note: consider deriving `Clone` or removing `Copy`
  --> $DIR/derive.rs:66:1
   |
66 | / impl<'a> Clone for Lt<'a> {
67 | |     fn clone(&self) -> Self { unimplemented!() }
68 | | }
   | |_^

error: aborting due to 5 previous errors

