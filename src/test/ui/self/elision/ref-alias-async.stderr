error[E0106]: missing lifetime specifier
  --> $DIR/ref-alias-async.rs:20:50
   |
LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {
   |                                                  ^
   |
   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.

error[E0106]: missing lifetime specifier
  --> $DIR/ref-alias-async.rs:26:59
   |
LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {
   |                                                           ^
   |
   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.

error[E0106]: missing lifetime specifier
  --> $DIR/ref-alias-async.rs:32:59
   |
LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {
   |                                                           ^
   |
   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.

error[E0106]: missing lifetime specifier
  --> $DIR/ref-alias-async.rs:38:68
   |
LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {
   |                                                                    ^
   |
   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.

error[E0106]: missing lifetime specifier
  --> $DIR/ref-alias-async.rs:44:68
   |
LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {
   |                                                                    ^
   |
   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.

error: cannot infer an appropriate lifetime
  --> $DIR/ref-alias-async.rs:20:38
   |
LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {
   |                                      ^           ---- this return type evaluates to the `'static` lifetime...
   |                                      |
   |                                      ...but this borrow...
   |
note: ...can't outlive the lifetime '_ as defined on the method body at 20:30
  --> $DIR/ref-alias-async.rs:20:30
   |
LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {
   |                              ^
help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 20:30
   |
LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 + '_ {
   |                                                  ^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/ref-alias-async.rs:26:47
   |
LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {
   |                                               ^           ---- this return type evaluates to the `'static` lifetime...
   |                                               |
   |                                               ...but this borrow...
   |
note: ...can't outlive the lifetime '_ as defined on the method body at 26:38
  --> $DIR/ref-alias-async.rs:26:38
   |
LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {
   |                                      ^
help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 26:38
   |
LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 + '_ {
   |                                                           ^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/ref-alias-async.rs:32:47
   |
LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {
   |                                               ^           ---- this return type evaluates to the `'static` lifetime...
   |                                               |
   |                                               ...but this borrow...
   |
note: ...can't outlive the lifetime '_ as defined on the method body at 32:38
  --> $DIR/ref-alias-async.rs:32:38
   |
LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {
   |                                      ^
help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:38
   |
LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 + '_ {
   |                                                           ^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/ref-alias-async.rs:38:56
   |
LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {
   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...
   |                                                        |
   |                                                        ...but this borrow...
   |
note: ...can't outlive the lifetime '_ as defined on the method body at 38:46
  --> $DIR/ref-alias-async.rs:38:46
   |
LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {
   |                                              ^
help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:46
   |
LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 + '_ {
   |                                                                    ^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/ref-alias-async.rs:44:56
   |
LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {
   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...
   |                                                        |
   |                                                        ...but this borrow...
   |
note: ...can't outlive the lifetime '_ as defined on the method body at 44:46
  --> $DIR/ref-alias-async.rs:44:46
   |
LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {
   |                                              ^
help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:46
   |
LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 + '_ {
   |                                                                    ^^^^^^^^^

error: aborting due to 10 previous errors

For more information about this error, try `rustc --explain E0106`.
