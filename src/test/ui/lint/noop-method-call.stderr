warning: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:24:32
   |
LL |     let foo_clone: &Foo<u32> = foo.clone();
   |                                ^^^^^^^^^^^ unnecessary method call
   |
   = note: `#[warn(noop_method_call)]` on by default
   = note: the type the method is being called on and the return type are functionally equivalent.
   = note: therefore, the method call doesn't actually do anything and can be removed.

warning: call to `.deref()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:31:39
   |
LL |     let derefed: &DerefExample<u32> = deref.deref();
   |                                       ^^^^^^^^^^^^^ unnecessary method call
   |
   = note: the type the method is being called on and the return type are functionally equivalent.
   = note: therefore, the method call doesn't actually do anything and can be removed.

warning: call to `.borrow()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:38:31
   |
LL |     let borrowed: &Foo<u32> = a.borrow();
   |                               ^^^^^^^^^^ unnecessary method call
   |
   = note: the type the method is being called on and the return type are functionally equivalent.
   = note: therefore, the method call doesn't actually do anything and can be removed.

warning: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:47:5
   |
LL |     foo.clone();
   |     ^^^^^^^^^^^ unnecessary method call
   |
   = note: the type the method is being called on and the return type are functionally equivalent.
   = note: therefore, the method call doesn't actually do anything and can be removed.

warning: 4 warnings emitted

