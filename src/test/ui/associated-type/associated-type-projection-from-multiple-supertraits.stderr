error: equality constraints are not yet supported in where clauses (see #20041)
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:34:46
   |
LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0221]: ambiguous associated type `Color` in bounds of `C`
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:19:32
   |
LL |     type Color;
   |     ----------- ambiguous `Color` from `Vehicle`
...
LL |     type Color;
   |     ----------- ambiguous `Color` from `Box`
...
LL | fn dent<C:BoxCar>(c: C, color: C::Color) {
   |                                ^^^^^^^^ ambiguous associated type `Color`
   |
help: use fully qualified syntax to disambiguate
   |
LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {
   |                                ^^^^^^^^^^^^^^^^^
help: use fully qualified syntax to disambiguate
   |
LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {
   |                                ^^^^^^^^^^^^^^^^^^^^^

error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:25:37
   |
LL |     type Color;
   |     ----------- ambiguous `Color` from `Vehicle`
...
LL |     type Color;
   |     ----------- ambiguous `Color` from `Box`
...
LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {
   |                                     ^^^^^^^^^^^ ambiguous associated type `Color`
   |
help: use fully qualified syntax to disambiguate
   |
LL | fn dent_object<COLOR>(c: dyn BoxCar<<BoxCar as Box>::Color>) {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^
help: use fully qualified syntax to disambiguate
   |
LL | fn dent_object<COLOR>(c: dyn BoxCar<<BoxCar as Vehicle>::Color>) {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0191]: the value of the associated type `Color` (from trait `Vehicle`) must be specified
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:25:30
   |
LL |     type Color;
   |     ----------- `Color` defined here
...
LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {
   |                              ^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `BoxCar<Color=COLOR, Color = Type>`

error[E0221]: ambiguous associated type `Color` in bounds of `C`
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:30:29
   |
LL |     type Color;
   |     ----------- ambiguous `Color` from `Vehicle`
...
LL |     type Color;
   |     ----------- ambiguous `Color` from `Box`
...
LL | fn paint<C:BoxCar>(c: C, d: C::Color) {
   |                             ^^^^^^^^ ambiguous associated type `Color`
   |
help: use fully qualified syntax to disambiguate
   |
LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {
   |                             ^^^^^^^^^^^^^^^^^
help: use fully qualified syntax to disambiguate
   |
LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {
   |                             ^^^^^^^^^^^^^^^^^^^^^

error[E0191]: the value of the associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified
  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:34:32
   |
LL |     type Color;
   |     ----------- `Color` defined here
...
LL |     type Color;
   |     ----------- `Color` defined here
...
LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {
   |                                ^^^^^^ help: specify the associated types: `BoxCar<Color = Type, Color = Type>`

error: aborting due to 6 previous errors

Some errors have detailed explanations: E0191, E0221.
For more information about an error, try `rustc --explain E0191`.
