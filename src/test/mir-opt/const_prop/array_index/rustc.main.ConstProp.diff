- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:3:11: 3:11
      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/array_index.rs:4:9: 4:10
      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:4:18: 4:30
      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:4:31: 4:32
      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:4:18: 4:33
      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:4:18: 4:33
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:4:9: 4:10
      }
  
      bb0: {
          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:4:9: 4:10
          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:4:18: 4:30
          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:4:18: 4:30
                                           // ty::Const
                                           // + ty: u32
                                           // + val: Value(Scalar(0x00000000))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:19: 4:20
                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }
                                           // ty::Const
                                           // + ty: u32
                                           // + val: Value(Scalar(0x00000001))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:22: 4:23
                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }
                                           // ty::Const
                                           // + ty: u32
                                           // + val: Value(Scalar(0x00000002))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:25: 4:26
                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }
                                           // ty::Const
                                           // + ty: u32
                                           // + val: Value(Scalar(0x00000003))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:28: 4:29
                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }
          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:4:31: 4:32
          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:4:31: 4:32
                                           // ty::Const
                                           // + ty: usize
                                           // + val: Value(Scalar(0x0000000000000002))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:31: 4:32
                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:4:18: 4:33
                                           // ty::Const
                                           // + ty: usize
                                           // + val: Value(Scalar(0x0000000000000004))
                                           // mir::Constant
                                           // + span: $DIR/array_index.rs:4:18: 4:33
                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }
-         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33
-         assert(move _5, "index out of bounds: the len is move _4 but the index is _3") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33
+         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33
+                                          // ty::Const
+                                          // + ty: bool
+                                          // + val: Value(Scalar(0x01))
+                                          // mir::Constant
+                                          // + span: $DIR/array_index.rs:4:18: 4:33
+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
+         assert(const true, "index out of bounds: the len is move _4 but the index is _3") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33
+                                          // ty::Const
+                                          // + ty: bool
+                                          // + val: Value(Scalar(0x01))
+                                          // mir::Constant
+                                          // + span: $DIR/array_index.rs:4:18: 4:33
+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
      }
  
      bb1: {
-         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33
+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33
+                                          // ty::Const
+                                          // + ty: u32
+                                          // + val: Value(Scalar(0x00000002))
+                                          // mir::Constant
+                                          // + span: $DIR/array_index.rs:4:18: 4:33
+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }
          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:4:33: 4:34
          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:4:33: 4:34
          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:3:11: 5:2
          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:5:1: 5:2
          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:5:2: 5:2
      }
  }
  
