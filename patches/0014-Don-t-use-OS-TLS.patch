From 9e8b8114de61ecdbf39f7582d7a3280ef2bfd339 Mon Sep 17 00:00:00 2001
From: bjorn3 <bjorn3@users.noreply.github.com>
Date: Sun, 23 Jun 2019 10:37:53 +0200
Subject: [PATCH] Don't use OS TLS

---
 src/libstd/thread/local.rs | 4 ++--
 src/libstd/thread/mod.rs   | 1 -
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/libstd/thread/local.rs b/src/libstd/thread/local.rs
index 9b355aa..a074aa5 100644
--- a/src/libstd/thread/local.rs
+++ b/src/libstd/thread/local.rs
@@ -154,10 +154,10 @@ macro_rules! __thread_local_inner {
             fn __init() -> $t { $init }
 
             unsafe fn __getit() -> $crate::option::Option<&'static $t> {
-                #[cfg(all(target_arch = "wasm32", not(target_feature = "atomics")))]
                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =
                     $crate::thread::__StaticLocalKeyInner::new();
 
+                /*
                 #[thread_local]
                 #[cfg(all(
                     target_thread_local,
@@ -172,6 +172,7 @@ macro_rules! __thread_local_inner {
                 ))]
                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
                     $crate::thread::__OsLocalKeyInner::new();
+                */
 
                 __KEY.get(__init)
             }
@@ -320,7 +321,6 @@ mod lazy {
 /// On some platforms like wasm32 there's no threads, so no need to generate
 /// thread locals and we can instead just use plain statics!
 #[doc(hidden)]
-#[cfg(all(target_arch = "wasm32", not(target_feature = "atomics")))]
 pub mod statik {
     use super::lazy::LazyKeyInner;
     use crate::fmt;
diff --git a/src/libstd/thread/mod.rs b/src/libstd/thread/mod.rs
index 35de4f4..f142646 100644
--- a/src/libstd/thread/mod.rs
+++ b/src/libstd/thread/mod.rs
@@ -195,7 +195,6 @@ pub use self::local::{LocalKey, AccessError};
 // where available, but both are needed.
 
 #[unstable(feature = "libstd_thread_internals", issue = "0")]
-#[cfg(all(target_arch = "wasm32", not(target_feature = "atomics")))]
 #[doc(hidden)] pub use self::local::statik::Key as __StaticLocalKeyInner;
 #[unstable(feature = "libstd_thread_internals", issue = "0")]
 #[cfg(target_thread_local)]
-- 
2.20.1 (Apple Git-117)

