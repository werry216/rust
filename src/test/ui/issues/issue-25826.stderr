error: pointers cannot be compared in a meaningful way during const eval.
  --> $DIR/issue-25826.rs:3:30
   |
LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information
   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a non-zst static item is never equal to the address of another non-zst static item), comparing an integer address with any allocation's address is impossible to do at compile-time.
   = note: That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` for all comparisons where CTFE is sure that two addresses are equal. The mirror intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where CTFE is sure that two addresses are inequal.

error: aborting due to previous error

