error[E0004]: non-exhaustive patterns: type `u8` is non-empty
  --> $DIR/match-empty.rs:45:11
   |
LL |     match 0u8 {}
   |           ^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled
  --> $DIR/match-empty.rs:47:11
   |
LL | struct NonEmptyStruct(bool);
   | ----------------------------
   | |      |
   | |      variant not covered
   | `NonEmptyStruct` defined here
...
LL |     match NonEmptyStruct(true) {}
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled
  --> $DIR/match-empty.rs:49:11
   |
LL |   union NonEmptyUnion1 {
   |   -     -------------- variant not covered
   |  _|
   | |
LL | |     foo: (),
LL | | }
   | |_- `NonEmptyUnion1` defined here
...
LL |       match (NonEmptyUnion1 { foo: () }) {}
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled
  --> $DIR/match-empty.rs:51:11
   |
LL |   union NonEmptyUnion2 {
   |   -     -------------- variant not covered
   |  _|
   | |
LL | |     foo: (),
LL | |     bar: (),
LL | | }
   | |_- `NonEmptyUnion2` defined here
...
LL |       match (NonEmptyUnion2 { foo: () }) {}
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled
  --> $DIR/match-empty.rs:53:11
   |
LL | / enum NonEmptyEnum1 {
LL | |     Foo(bool),
   | |     --- variant not covered
LL | | }
   | |_- `NonEmptyEnum1` defined here
...
LL |       match NonEmptyEnum1::Foo(true) {}
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled
  --> $DIR/match-empty.rs:55:11
   |
LL | / enum NonEmptyEnum2 {
LL | |     Foo(bool),
   | |     --- variant not covered
LL | |     Bar,
   | |     --- variant not covered
LL | | }
   | |_- `NonEmptyEnum2` defined here
...
LL |       match NonEmptyEnum2::Foo(true) {}
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled
  --> $DIR/match-empty.rs:57:11
   |
LL | / enum NonEmptyEnum5 {
LL | |     V1, V2, V3, V4, V5,
LL | | }
   | |_- `NonEmptyEnum5` defined here
...
LL |       match NonEmptyEnum5::V1 {}
   |             ^^^^^^^^^^^^^^^^^
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms

error: aborting due to 7 previous errors

For more information about this error, try `rustc --explain E0004`.
