error: implementation of `X` is not general enough
  --> $DIR/issue-57362-2.rs:22:13
   |
LL | / trait X {
LL | |     type G;
LL | |     fn make_g() -> Self::G;
LL | | }
   | |_- trait `X` defined here
...
LL |       let x = <fn (&())>::make_g();
   |               ^^^^^^^^^^^^^^^^^^ implementation of `X` is not general enough
   |
   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`
   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`

error: implementation of `X` is not general enough
  --> $DIR/issue-57362-2.rs:22:13
   |
LL | / trait X {
LL | |     type G;
LL | |     fn make_g() -> Self::G;
   | |     ----------------------- due to a where-clause on `X::make_g`...
LL | | }
   | |_- trait `X` defined here
...
LL |       let x = <fn (&())>::make_g();
   |               ^^^^^^^^^^^^^^^^^^ doesn't satisfy where-clause
   |
   = note: ...`X` would have to be implemented for the type `for<'r> fn(&'r ())`
   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`

error: aborting due to 2 previous errors

