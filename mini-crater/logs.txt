cargo-0.49.0/src/bin/cargo/cli.rs:104:34: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/bin/cargo/cli.rs:121:5: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/bin/cargo/cli.rs:157:30: redundant closure found
cargo-0.49.0/src/bin/cargo/cli.rs:184:41: casting `u64` to `u32` may truncate the value
cargo-0.49.0/src/bin/cargo/cli.rs:196:42: redundant closure found
cargo-0.49.0/src/bin/cargo/cli.rs:200:39: redundant closure found
cargo-0.49.0/src/bin/cargo/cli.rs:231:1: more than 3 bools in a struct
cargo-0.49.0/src/bin/cargo/cli.rs:245:22: casting `u64` to `u32` may truncate the value
cargo-0.49.0/src/bin/cargo/cli.rs:247:47: redundant closure found
cargo-0.49.0/src/bin/cargo/cli.rs:257:22: redundant closure found
cargo-0.49.0/src/bin/cargo/cli.rs:26:20: redundant else block
cargo-0.49.0/src/bin/cargo/cli.rs:7:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/bench.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/bench.rs:76:59: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/build.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/check.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/clean.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/doc.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/fetch.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/fix.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/generate_lockfile.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/git_checkout.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/help.rs:20:1: item name ends with its containing module's name
cargo-0.49.0/src/bin/cargo/commands/init.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/install.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/install.rs:97:16: use Option::map_or instead of an if let/else
cargo-0.49.0/src/bin/cargo/commands/locate_project.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/login.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/metadata.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/mod.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/new.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/new.rs:20:24: use Option::map_or instead of an if let/else
cargo-0.49.0/src/bin/cargo/commands/owner.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/owner.rs:38:43: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/owner.rs:39:43: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/owner.rs:40:43: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/owner.rs:43:30: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/owner.rs:46:30: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/package.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/pkgid.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/publish.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/publish.rs:40:47: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/read_manifest.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/run.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/rustc.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/rustdoc.rs:3:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/search.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/test.rs:127:54: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/test.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/tree.rs:149:49: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/tree.rs:2:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/uninstall.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/update.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/vendor.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/vendor.rs:96:16: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/bin/cargo/commands/verify_project.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/version.rs:2:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/yank.rs:1:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/commands/yank.rs:32:36: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/yank.rs:33:35: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/yank.rs:34:36: redundant closure found
cargo-0.49.0/src/bin/cargo/commands/yank.rs:35:36: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:100:17: wildcard match will miss any future added variants
cargo-0.49.0/src/bin/cargo/main.rs:118:41: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:137:43: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:148:19: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/bin/cargo/main.rs:174:57: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:18:5: usage of wildcard import
cargo-0.49.0/src/bin/cargo/main.rs:72:22: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:94:13: wildcard match will miss any future added variants
cargo-0.49.0/src/bin/cargo/main.rs:96:41: redundant closure found
cargo-0.49.0/src/bin/cargo/main.rs:98:60: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:155:13: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:170:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:175:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:180:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:186:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:197:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:205:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:51:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:69:48: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
cargo-0.49.0/src/cargo/core/compiler/build_config.rs:96:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_context/mod.rs:44:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_context/mod.rs:83:20: you should put `x86_64` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:108:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:121:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:149:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:420:69: you should put `mode/target_kind` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:423:19: you should put `CrateTypes` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:424:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:469:58: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:591:20: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:603:19: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:665:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:82:31: you should put `FileType` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:83:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:84:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:96:31: you should put `FileType` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:98:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/build_plan.rs:4:9: you should put `BuildPlan` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/build_plan.rs:5:66: you should put `BuildPlan` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:150:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:169:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:185:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:193:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:194:49: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:198:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:314:16: you should put `rustc_tool` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/compilation.rs:91:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:118:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:147:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:157:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:29:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:33:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:49:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:204:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:277:22: you should put `OUT_DIR` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:324:66: you should put `FileType` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:393:37: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:426:71: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:125:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:125:5: this function has too many lines (107/100)
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:270:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:286:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:308:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:340:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:349:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:354:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:358:21: you should put `RunCustomBuild` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:361:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:365:9: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:374:43: you should put `RunCustomBuild` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:378:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:383:41: you should put `RunCustomBuild` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:384:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:391:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:397:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:523:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:538:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:542:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:83:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:92:25: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/crate_type.rs:16:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/crate_type.rs:29:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/crate_type.rs:40:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/crate_type.rs:49:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/crate_type.rs:60:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:150:1: this function has too many lines (230/100)
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:154:29: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:353:56: stripping a prefix manually
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:448:27: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:464:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:481:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:48:56: you should put `RunCustomBuild` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:561:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:567:20: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:576:28: `mut value` is being shadowed
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:606:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:624:13: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:688:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:756:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:823:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1021:51: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1252:20: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1278:19: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1656:16: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1664:5: field assignment outside of initializer for an instance created with Default::default()
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1787:5: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1795:5: field assignment outside of initializer for an instance created with Default::default()
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1882:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1894:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1906:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1917:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1923:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1956:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1962:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1963:22: casting `usize` to `u8` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1964:22: casting `usize` to `u8` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1965:22: casting `usize` to `u8` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1966:22: casting `usize` to `u8` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1980:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1980:24: stripping a prefix manually
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1986:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:2016:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:61:5: you should put `CompileMode` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:63:12: you should put `CompileKind` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:67:7: you should put `CARGO_DEFAULT_LIB_METADATA[^4` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:68:5: you should put `package_id` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:71:19: you should put `test/bench/for_host/edition` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:755:52: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:77:5: you should put `is_std` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:816:5: this function has too many lines (127/100)
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:863:64: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:875:33: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:876:32: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:896:30: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:897:30: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:991:37: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:12:5: you should put `src/librustc_jobserver/lib.rs` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:282:30: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:329:13: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:332:23: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:34:53: you should put `NeedsToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:35:6: you should put `ReleaseToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:37:6: you should put `NeedsToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:40:56: you should put `NeedsToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:40:5: you should put `NeedsToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:43:6: you should put `ReleaseToken` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:749:13: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:786:26: unused `self` argument
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:81:61: you should put `DrainState` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:865:13: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:871:13: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:890:9: unused `self` argument
cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:93:24: you should put `JobQueue` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/links.rs:8:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/mod.rs:1016:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/mod.rs:1094:19: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/mod.rs:1131:1: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/compiler/mod.rs:1277:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/mod.rs:179:1: this function has too many lines (162/100)
cargo-0.49.0/src/cargo/core/compiler/mod.rs:198:78: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/mod.rs:201:25: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/mod.rs:267:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/mod.rs:324:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/compiler/mod.rs:392:45: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/mod.rs:415:23: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/compiler/mod.rs:667:15: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/compiler/mod.rs:693:1: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/compiler/mod.rs:725:42: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/compiler/mod.rs:736:1: this function has too many lines (141/100)
cargo-0.49.0/src/cargo/core/compiler/mod.rs:73:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/mod.rs:777:12: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/compiler/mod.rs:873:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/output_depinfo.rs:41:13: wildcard match will miss any future added variants
cargo-0.49.0/src/cargo/core/compiler/rustdoc.rs:16:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/rustdoc.rs:57:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/rustdoc.rs:72:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:134:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:16:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:30:28: redundant closure found
cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:34:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/timings.rs:16:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/compiler/timings.rs:192:64: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/core/compiler/timings.rs:212:58: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/core/compiler/timings.rs:234:13: non-binding `let` on a type that implements `Drop`
cargo-0.49.0/src/cargo/core/compiler/timings.rs:355:13: casting `f64` to `u32` may lose the sign of the value
cargo-0.49.0/src/cargo/core/compiler/timings.rs:355:13: casting `f64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/timings.rs:397:38: casting `f64` to `u32` may lose the sign of the value
cargo-0.49.0/src/cargo/core/compiler/timings.rs:397:38: casting `f64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/core/compiler/timings.rs:484:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/compiler/timings.rs:605:38: you should put `rmeta_time` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/timings.rs:605:50: you should put `codegen_time` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/timings.rs:641:26: literal non-ASCII character detected
cargo-0.49.0/src/cargo/core/compiler/unit.rs:100:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/unit.rs:151:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/unit.rs:161:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/compiler/unit.rs:35:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:154:29: you should put `state.unit_dependencies` between ticks in the documentation
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:213:1: this function has too many lines (110/100)
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:329:13: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:480:5: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:511:5: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:52:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/unit_dependencies.rs:52:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/compiler/unit_graph.rs:65:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/compiler/unit_graph.rs:65:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/dependency.rs:157:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/dependency.rs:182:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/dependency.rs:203:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:224:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:23:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/dependency.rs:248:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:270:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:274:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:278:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:287:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:291:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:305:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:311:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:319:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:337:75: redundant closure found
cargo-0.49.0/src/cargo/core/dependency.rs:397:56: redundant closure found
cargo-0.49.0/src/cargo/core/dependency.rs:403:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:408:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:415:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:419:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:424:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:428:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:433:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:438:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:443:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:449:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/dependency.rs:450:9: unnecessary `!=` operation
cargo-0.49.0/src/cargo/core/features.rs:119:17: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/features.rs:229:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/features.rs:274:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/features.rs:278:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/features.rs:306:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/features.rs:338:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/features.rs:362:25: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
cargo-0.49.0/src/cargo/core/features.rs:380:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/features.rs:401:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/features.rs:409:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/features.rs:412:45: redundant closure found
cargo-0.49.0/src/cargo/core/features.rs:416:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/features.rs:419:45: redundant closure found
cargo-0.49.0/src/cargo/core/features.rs:424:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/features.rs:431:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/features.rs:477:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/features.rs:509:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/features.rs:518:5: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/core/features.rs:542:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/features.rs:543:37: redundant closure found
cargo-0.49.0/src/cargo/core/features.rs:547:60: redundant closure found
cargo-0.49.0/src/cargo/core/features.rs:556:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/features.rs:563:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/manifest.rs:116:13: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/manifest.rs:118:58: redundant closure found
cargo-0.49.0/src/cargo/core/manifest.rs:130:13: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/manifest.rs:143:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:159:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:162:34: redundant closure found
cargo-0.49.0/src/cargo/core/manifest.rs:169:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:17:5: usage of wildcard import
cargo-0.49.0/src/cargo/core/manifest.rs:189:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/manifest.rs:215:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:222:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:22:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/manifest.rs:360:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:407:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:410:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:413:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:416:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:419:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:422:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:425:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:431:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:438:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:444:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:447:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:450:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:453:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:456:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:459:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:462:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:466:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:470:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:477:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:481:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:488:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/manifest.rs:512:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:516:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:520:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:524:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:528:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:538:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:557:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:561:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:565:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:569:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:577:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:581:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:588:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:617:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:632:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:648:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:659:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:66:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/manifest.rs:670:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:693:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:708:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:723:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:726:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:729:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:735:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:738:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:741:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:744:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:747:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:751:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:754:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:757:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:760:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:763:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:767:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:776:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:780:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:787:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:798:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:800:56: redundant closure found
cargo-0.49.0/src/cargo/core/manifest.rs:805:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:809:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:818:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:823:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:828:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:831:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:834:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:839:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:85:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/manifest.rs:888:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/manifest.rs:936:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:1075:28: redundant closure found
cargo-0.49.0/src/cargo/core/package.rs:160:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:170:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:174:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:182:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:186:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:190:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:194:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:198:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:202:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:206:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:210:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:217:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:221:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:222:35: redundant closure found
cargo-0.49.0/src/cargo/core/package.rs:226:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:227:35: redundant closure found
cargo-0.49.0/src/cargo/core/package.rs:230:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:239:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:249:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package.rs:287:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/package.rs:385:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:421:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
cargo-0.49.0/src/cargo/core/package.rs:425:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:452:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:453:60: redundant closure found
cargo-0.49.0/src/cargo/core/package.rs:459:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:473:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:587:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:682:46: casting `f64` to `u64` may lose the sign of the value
cargo-0.49.0/src/cargo/core/package.rs:682:46: casting `f64` to `u64` may truncate the value
cargo-0.49.0/src/cargo/core/package.rs:682:63: casting `f64` to `u64` may lose the sign of the value
cargo-0.49.0/src/cargo/core/package.rs:682:63: casting `f64` to `u64` may truncate the value
cargo-0.49.0/src/cargo/core/package.rs:731:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package.rs:790:13: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/package.rs:988:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/package_id.rs:115:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package_id.rs:124:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:139:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:142:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:145:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:149:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:157:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:161:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:169:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id.rs:174:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/package_id_spec.rs:101:39: redundant closure found
cargo-0.49.0/src/cargo/core/package_id_spec.rs:143:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id_spec.rs:147:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id_spec.rs:151:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id_spec.rs:160:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/package_id_spec.rs:179:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package_id_spec.rs:212:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/package_id_spec.rs:231:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/package_id_spec.rs:51:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package_id_spec.rs:77:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/package_id_spec.rs:88:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:1004:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:1014:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:1018:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:1028:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:106:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/profiles.rs:143:5: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/profiles.rs:286:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:294:40: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/profiles.rs:30:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/profiles.rs:342:25: `maker` is being shadowed
cargo-0.49.0/src/cargo/core/profiles.rs:370:41: unused `self` argument
cargo-0.49.0/src/cargo/core/profiles.rs:370:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:372:9: field assignment outside of initializer for an instance created with Default::default()
cargo-0.49.0/src/cargo/core/profiles.rs:382:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:383:28: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/profiles.rs:397:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:405:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/profiles.rs:607:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/profiles.rs:909:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:923:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:934:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/profiles.rs:987:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/registry.rs:111:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:127:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:168:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:19:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:240:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:26:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/registry.rs:344:49: redundant closure found
cargo-0.49.0/src/cargo/core/registry.rs:369:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/registry.rs:424:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/registry.rs:49:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/registry.rs:520:17: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/registry.rs:763:53: redundant closure found
cargo-0.49.0/src/cargo/core/registry.rs:765:53: redundant closure found
cargo-0.49.0/src/cargo/core/registry.rs:807:14: redundant closure found
cargo-0.49.0/src/cargo/core/registry.rs:814:53: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/conflict_cache.rs:197:29: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/conflict_cache.rs:41:38: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/core/resolver/context.rs:274:53: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/context.rs:297:9: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/context.rs:42:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/context.rs:74:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/encode.rs:156:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/encode.rs:156:5: this function has too many lines (164/100)
cargo-0.49.0/src/cargo/core/resolver/encode.rs:339:17: wildcard match will miss any future added variants
cargo-0.49.0/src/cargo/core/resolver/encode.rs:438:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/resolver/encode.rs:449:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/resolver/encode.rs:529:34: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/encode.rs:602:59: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/encode.rs:623:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/encode.rs:652:27: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/resolver/encode.rs:674:51: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/errors.rs:103:22: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/errors.rs:104:22: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/errors.rs:206:9: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/resolver/errors.rs:257:45: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/errors.rs:27:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/errors.rs:305:17: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/core/resolver/errors.rs:70:1: this function has too many lines (207/100)
cargo-0.49.0/src/cargo/core/resolver/features.rs:104:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/features.rs:111:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/features.rs:162:56: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/features.rs:179:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/features.rs:186:23: you should put `RequestedFeatures` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:187:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/features.rs:199:23: you should put `RequestedFeatures` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:200:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/features.rs:209:9: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/features.rs:221:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/features.rs:231:21: you should put `pkg_id/is_build` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:233:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/features.rs:247:58: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/features.rs:278:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/features.rs:394:27: you should put `FeatureValue` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:460:19: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/resolver/features.rs:480:24: you should put `FeatureValues` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:496:24: you should put `FeatureValues` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/features.rs:561:28: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/features.rs:58:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/features.rs:67:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/core/resolver/mod.rs:1017:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/core/resolver/mod.rs:1045:57: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/mod.rs:122:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/mod.rs:142:44: redundant closure found
cargo-0.49.0/src/cargo/core/resolver/mod.rs:180:1: this function has too many lines (225/100)
cargo-0.49.0/src/cargo/core/resolver/mod.rs:311:17: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/resolver/mod.rs:421:52: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.
cargo-0.49.0/src/cargo/core/resolver/mod.rs:437:33: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/mod.rs:457:69: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.
cargo-0.49.0/src/cargo/core/resolver/mod.rs:470:37: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/core/resolver/mod.rs:480:37: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/mod.rs:607:11: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/core/resolver/mod.rs:631:21: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/resolver/mod.rs:942:15: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/resolver/mod.rs:988:20: redundant else block
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:120:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:132:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:199:24: redundant else block
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:235:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:239:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:255:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:259:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:263:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:269:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:273:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:274:9: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:280:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:284:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:288:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:292:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:296:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:300:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:315:13: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:354:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:362:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:60:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:76:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/resolve.rs:90:35: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/resolver/types.rs:111:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/resolver/types.rs:121:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/types.rs:141:19: you should put `ResolveOpts` between ticks in the documentation
cargo-0.49.0/src/cargo/core/resolver/types.rs:142:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/types.rs:149:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/resolver/types.rs:181:9: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
cargo-0.49.0/src/cargo/core/resolver/types.rs:187:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
cargo-0.49.0/src/cargo/core/resolver/types.rs:261:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
cargo-0.49.0/src/cargo/core/shell.rs:113:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:130:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/shell.rs:148:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:153:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:163:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:18:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:198:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:206:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:214:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:228:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:239:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:250:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:259:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:267:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:26:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:277:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:282:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:314:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:322:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/shell.rs:330:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/shell.rs:98:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:103:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:247:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/source/mod.rs:261:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:268:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:273:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:291:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:302:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:307:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/mod.rs:31:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:37:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:39:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:47:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:50:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:52:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:63:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:74:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/mod.rs:83:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:107:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:128:50: redundant closure found
cargo-0.49.0/src/cargo/core/source/source_id.rs:147:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:156:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:162:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:166:19: you should put `SourceId` between ticks in the documentation
cargo-0.49.0/src/cargo/core/source/source_id.rs:167:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:171:19: you should put `SourceId` between ticks in the documentation
cargo-0.49.0/src/cargo/core/source/source_id.rs:172:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:178:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:187:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:18:74: calling `std::sync::Mutex::default()` is more clear than this expression
cargo-0.49.0/src/cargo/core/source/source_id.rs:195:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:207:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:213:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:217:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:225:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:228:16: use Option::map_or_else instead of an if let/else
cargo-0.49.0/src/cargo/core/source/source_id.rs:236:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:241:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:252:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:257:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:262:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/source/source_id.rs:305:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:310:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:318:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:326:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:355:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/source/source_id.rs:393:61: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:394:42: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:395:42: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:397:71: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:397:71: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:398:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:398:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:399:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:399:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:401:63: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:401:63: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:401:63: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:402:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:402:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:402:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:403:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:403:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:403:43: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:406:21: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/source/source_id.rs:412:41: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:413:36: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:414:36: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:420:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:420:47: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:494:42: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/source/source_id.rs:512:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:513:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:517:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:518:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:525:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:526:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:530:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:531:17: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:535:33: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:536:37: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:537:42: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:538:38: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/core/source/source_id.rs:548:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/source/source_id.rs:597:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:103:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:123:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:150:1: this function has too many lines (141/100)
cargo-0.49.0/src/cargo/core/summary.rs:158:9: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/summary.rs:181:21: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/summary.rs:192:28: redundant else block
cargo-0.49.0/src/cargo/core/summary.rs:258:32: redundant else block
cargo-0.49.0/src/cargo/core/summary.rs:281:28: redundant else block
cargo-0.49.0/src/cargo/core/summary.rs:303:28: redundant else block
cargo-0.49.0/src/cargo/core/summary.rs:321:51: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/core/summary.rs:344:5: you should put `FeatureValue` between ticks in the documentation
cargo-0.49.0/src/cargo/core/summary.rs:350:85: you should put `FeatureValue` between ticks in the documentation
cargo-0.49.0/src/cargo/core/summary.rs:36:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/summary.rs:378:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:386:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:387:13: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/summary.rs:407:13: usage of wildcard import for enum variants
cargo-0.49.0/src/cargo/core/summary.rs:69:34: redundant closure found
cargo-0.49.0/src/cargo/core/summary.rs:75:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:78:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:81:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:84:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:87:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:90:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:93:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:96:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/summary.rs:99:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/workspace.rs:1019:59: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/workspace.rs:1056:5: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/workspace.rs:113:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/workspace.rs:1157:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/core/workspace.rs:128:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/core/workspace.rs:150:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:159:16: redundant else block
cargo-0.49.0/src/cargo/core/workspace.rs:197:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:225:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:255:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:267:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:329:37: you should put `VirtualManifest` between ticks in the documentation
cargo-0.49.0/src/cargo/core/workspace.rs:410:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:440:9: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/core/workspace.rs:511:32: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/workspace.rs:561:25: literal non-ASCII character detected
cargo-0.49.0/src/cargo/core/workspace.rs:613:13: called `filter_map(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/workspace.rs:615:22: redundant closure found
cargo-0.49.0/src/cargo/core/workspace.rs:688:35: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/core/workspace.rs:762:27: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/core/workspace.rs:784:17: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/core/workspace.rs:849:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:893:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/core/workspace.rs:906:24: redundant else block
cargo-0.49.0/src/cargo/core/workspace.rs:932:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/lib.rs:177:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/lib.rs:180:36: redundant closure found
cargo-0.49.0/src/cargo/lib.rs:180:36: redundant closure found
cargo-0.49.0/src/cargo/lib.rs:180:36: redundant closure found
cargo-0.49.0/src/cargo/lib.rs:180:36: redundant closure found
cargo-0.49.0/src/cargo/lib.rs:180:36: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_clean.rs:205:23: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_clean.rs:27:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_clean.rs:27:1: this function has too many lines (120/100)
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:1078:14: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:109:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:119:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:1227:17: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:127:35: usage of `FromIterator::from_iter`
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:128:32: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:173:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:205:36: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:242:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:249:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:258:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:275:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:275:1: this function has too many lines (219/100)
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:468:9: calling `std::collections::HashMap::default()` is more clear than this expression
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:548:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:556:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:574:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:583:21: you should put `CompileFilter` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:584:5: more than 3 bools in function parameters
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:584:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:592:9: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:593:9: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:607:13: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:612:21: you should put `CompileFilter` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:613:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:618:9: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:641:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:652:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:655:50: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:673:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:692:49: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:703:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:729:1: this function has too many lines (205/100)
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:82:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_compile.rs:874:69: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_doc.rs:20:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_fetch.rs:15:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_fetch.rs:27:46: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_fetch.rs:36:20: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:160:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:175:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:22:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:37:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:37:1: this function has too many lines (171/100)
cargo-0.49.0/src/cargo/ops/cargo_install.rs:13:5: usage of wildcard import
cargo-0.49.0/src/cargo/ops/cargo_install.rs:148:1: more than 3 bools in function parameters
cargo-0.49.0/src/cargo/ops/cargo_install.rs:148:1: this function has too many lines (316/100)
cargo-0.49.0/src/cargo/ops/cargo_install.rs:202:17: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_install.rs:312:64: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_install.rs:318:63: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/cargo_install.rs:32:13: non-binding `let` on a type that implements `Drop`
cargo-0.49.0/src/cargo/ops/cargo_install.rs:37:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_install.rs:454:22: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_install.rs:483:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_install.rs:683:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_new.rs:101:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_new.rs:245:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_new.rs:251:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_new.rs:367:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_new.rs:405:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_new.rs:489:5: you should put `IgnoreList` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/cargo_new.rs:525:47: you should put `IgnoreList` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/cargo_new.rs:525:9: you should put `format_existing` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/cargo_new.rs:572:34: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/cargo_new.rs:623:1: this function has too many lines (130/100)
cargo-0.49.0/src/cargo/ops/cargo_new.rs:781:5: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.
cargo-0.49.0/src/cargo/ops/cargo_new.rs:800:16: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/cargo_output_metadata.rs:163:36: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_output_metadata.rs:27:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_output_metadata.rs:45:45: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_package.rs:144:1: this function has too many lines (112/100)
cargo-0.49.0/src/cargo/ops/cargo_package.rs:207:13: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/cargo_package.rs:25:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/ops/cargo_package.rs:307:54: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_package.rs:394:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_package.rs:418:21: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/cargo_package.rs:425:61: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_package.rs:459:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_package.rs:66:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_package.rs:769:29: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/cargo_package.rs:93:20: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/ops/cargo_pkgid.rs:5:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:14:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:171:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:37:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:57:49: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:69:37: redundant closure found
cargo-0.49.0/src/cargo/ops/cargo_run.rs:25:24: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/ops/cargo_run.rs:35:9: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/ops/cargo_run.rs:37:16: redundant else block
cargo-0.49.0/src/cargo/ops/cargo_run.rs:53:9: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/ops/cargo_run.rs:65:16: redundant else block
cargo-0.49.0/src/cargo/ops/cargo_run.rs:9:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_test.rs:16:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_test.rs:43:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_test.rs:84:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/cargo_uninstall.rs:14:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/cargo_uninstall.rs:7:5: usage of wildcard import
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:147:9: you should put `PackageId` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:233:21: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:244:22: you should put `PackageId` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:244:63: you should put `PackageId` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:253:17: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:370:5: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:392:9: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:505:8: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:525:10: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:542:27: redundant closure found
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:542:5: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:561:20: redundant else block
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:613:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:645:41: you should put `BTreeSet` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:654:42: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:662:14: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:674:17: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:681:17: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:92:19: you should put `InstallTracker` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/fix.rs:200:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/fix.rs:200:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/fix.rs:424:20: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
cargo-0.49.0/src/cargo/ops/fix.rs:455:13: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/fix.rs:506:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/ops/fix.rs:608:9: field assignment outside of initializer for an instance created with Default::default()
cargo-0.49.0/src/cargo/ops/fix.rs:612:42: redundant closure found
cargo-0.49.0/src/cargo/ops/fix.rs:619:48: stripping a prefix manually
cargo-0.49.0/src/cargo/ops/fix.rs:66:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/fix.rs:66:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/ops/fix.rs:708:18: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/fix.rs:77:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/lockfile.rs:154:13: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/ops/lockfile.rs:217:9: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/ops/lockfile.rs:30:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/lockfile.rs:35:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/lockfile.rs:35:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/ops/lockfile.rs:87:1: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/ops/lockfile.rs:8:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/lockfile.rs:8:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/ops/registry.rs:150:21: redundant closure found
cargo-0.49.0/src/cargo/ops/registry.rs:188:1: this function has too many lines (130/100)
cargo-0.49.0/src/cargo/ops/registry.rs:196:16: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/registry.rs:212:32: unnecessary `!=` operation
cargo-0.49.0/src/cargo/ops/registry.rs:222:53: redundant closure found
cargo-0.49.0/src/cargo/ops/registry.rs:224:44: redundant closure found
cargo-0.49.0/src/cargo/ops/registry.rs:31:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/registry.rs:346:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:346:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/registry.rs:351:26: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/registry.rs:385:12: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/ops/registry.rs:386:15: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/ops/registry.rs:38:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/ops/registry.rs:477:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:483:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:503:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:505:38: calling `util::config::CargoHttpConfig::default()` is more clear than this expression
cargo-0.49.0/src/cargo/ops/registry.rs:510:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:529:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/registry.rs:53:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:573:22: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/registry.rs:608:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:621:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:671:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:671:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/registry.rs:674:10: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/ops/registry.rs:678:17: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/registry.rs:730:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:731:16: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/registry.rs:785:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/registry.rs:794:16: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/registry.rs:828:14: you should put `SourceId` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/registry.rs:848:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:199:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:199:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/resolve.rs:199:1: this function has too many lines (137/100)
cargo-0.49.0/src/cargo/ops/resolve.rs:241:28: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/resolve.rs:28:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/ops/resolve.rs:384:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:417:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:589:9: `keep` is being shadowed
cargo-0.49.0/src/cargo/ops/resolve.rs:58:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:58:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/resolve.rs:602:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/resolve.rs:75:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/resolve.rs:75:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/tree/graph.rs:129:26: you should put `PackageIds` between ticks in the documentation
cargo-0.49.0/src/cargo/ops/tree/graph.rs:131:47: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/tree/graph.rs:152:15: indexing into a vector may panic
cargo-0.49.0/src/cargo/ops/tree/graph.rs:173:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/ops/tree/graph.rs:234:46: called `filter(..).flat_map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/ops/tree/graph.rs:328:44: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/tree/graph.rs:330:50: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/tree/graph.rs:563:35: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/ops/tree/mod.rs:112:11: literal non-ASCII character detected
cargo-0.49.0/src/cargo/ops/tree/mod.rs:113:10: literal non-ASCII character detected
cargo-0.49.0/src/cargo/ops/tree/mod.rs:114:10: literal non-ASCII character detected
cargo-0.49.0/src/cargo/ops/tree/mod.rs:115:12: literal non-ASCII character detected
cargo-0.49.0/src/cargo/ops/tree/mod.rs:126:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/tree/mod.rs:21:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/tree/mod.rs:21:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/ops/tree/mod.rs:360:30: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/tree/mod.rs:58:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/ops/vendor.rs:14:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/ops/vendor.rs:21:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/ops/vendor.rs:314:34: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/ops/vendor.rs:324:13: wildcard match will miss any future added variants
cargo-0.49.0/src/cargo/ops/vendor.rs:70:1: this function has too many lines (175/100)
cargo-0.49.0/src/cargo/sources/config.rs:102:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/config.rs:135:67: redundant closure found
cargo-0.49.0/src/cargo/sources/config.rs:206:36: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/sources/config.rs:282:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/sources/config.rs:70:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/config.rs:81:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/config.rs:97:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/directory.rs:14:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/directory.rs:90:56: redundant closure found
cargo-0.49.0/src/cargo/sources/git/source.rs:14:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/sources/git/source.rs:25:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/source.rs:49:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/git/source.rs:53:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/source.rs:69:20: comparison to empty slice
cargo-0.49.0/src/cargo/sources/git/utils.rs:1025:19: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/sources/git/utils.rs:1158:9: stripping a suffix manually
cargo-0.49.0/src/cargo/sources/git/utils.rs:176:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/git/utils.rs:180:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/git/utils.rs:184:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:188:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:242:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:253:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:262:13: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/sources/git/utils.rs:289:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:294:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/git/utils.rs:298:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:308:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/git/utils.rs:472:9: non-binding `let` on a type that implements `Drop`
cargo-0.49.0/src/cargo/sources/git/utils.rs:489:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/sources/git/utils.rs:503:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/sources/git/utils.rs:528:28: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/sources/git/utils.rs:537:21: non-binding `let` on a type that implements `Drop`
cargo-0.49.0/src/cargo/sources/git/utils.rs:588:1: this function has too many lines (135/100)
cargo-0.49.0/src/cargo/sources/git/utils.rs:758:9: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/sources/git/utils.rs:858:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/path.rs:129:44: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/sources/path.rs:143:44: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/sources/path.rs:15:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/path.rs:282:50: redundant closure found
cargo-0.49.0/src/cargo/sources/path.rs:313:21: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/sources/path.rs:314:21: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/sources/path.rs:319:21: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/sources/path.rs:339:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/sources/path.rs:339:9: this function's return value is unnecessarily wrapped by `Result`
cargo-0.49.0/src/cargo/sources/path.rs:380:9: unused `self` argument
cargo-0.49.0/src/cargo/sources/path.rs:419:50: redundant closure found
cargo-0.49.0/src/cargo/sources/path.rs:429:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/path.rs:460:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/path.rs:473:43: redundant closure found
cargo-0.49.0/src/cargo/sources/path.rs:482:43: redundant closure found
cargo-0.49.0/src/cargo/sources/path.rs:63:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/path.rs:77:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/path.rs:98:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/index.rs:117:23: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/sources/registry/index.rs:121:70: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/sources/registry/index.rs:167:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/index.rs:215:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/index.rs:324:23: redundant closure found
cargo-0.49.0/src/cargo/sources/registry/index.rs:393:25: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/sources/registry/index.rs:468:40: you should put `SourceId` between ticks in the documentation
cargo-0.49.0/src/cargo/sources/registry/index.rs:590:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/sources/registry/index.rs:648:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/sources/registry/index.rs:736:1: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
cargo-0.49.0/src/cargo/sources/registry/index.rs:95:37: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
cargo-0.49.0/src/cargo/sources/registry/local.rs:12:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/mod.rs:192:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/mod.rs:203:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/mod.rs:229:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/mod.rs:372:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/mod.rs:373:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:375:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:381:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:382:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:383:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:384:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:452:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/sources/registry/mod.rs:582:20: redundant else block
cargo-0.49.0/src/cargo/sources/registry/mod.rs:621:9: unnecessary `!=` operation
cargo-0.49.0/src/cargo/sources/registry/remote.rs:139:17: unused `self` argument
cargo-0.49.0/src/cargo/sources/registry/remote.rs:32:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/sources/registry/remote.rs:72:13: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/sources/replaced.rs:12:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/sources/replaced.rs:5:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/canonical_url.rs:19:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/canonical_url.rs:65:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:218:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:222:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:234:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:249:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:264:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:279:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:298:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:320:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:328:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:352:13: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/util/command_prelude.rs:363:13: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/util/command_prelude.rs:378:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:387:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:387:5: this function has too many lines (104/100)
cargo-0.49.0/src/cargo/util/command_prelude.rs:39:20: you should put `arg_package_spec` between ticks in the documentation
cargo-0.49.0/src/cargo/util/command_prelude.rs:504:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:516:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:530:40: redundant closure found
cargo-0.49.0/src/cargo/util/command_prelude.rs:531:43: redundant closure found
cargo-0.49.0/src/cargo/util/command_prelude.rs:536:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:556:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:575:49: redundant closure found
cargo-0.49.0/src/cargo/util/command_prelude.rs:580:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/command_prelude.rs:631:18: redundant closure found
cargo-0.49.0/src/cargo/util/command_prelude.rs:638:18: redundant closure found
cargo-0.49.0/src/cargo/util/command_prelude.rs:647:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:651:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:662:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/command_prelude.rs:665:51: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/util/config/de.rs:420:16: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/util/config/de.rs:46:25: you should put `CV::List` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/de.rs:47:24: you should put `ConfigSeqAccess` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/de.rs:527:53: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/util/config/de.rs:530:53: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/util/config/de.rs:532:68: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/util/config/key.rs:11:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/key.rs:69:9: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/config/mod.rs:100:71: you should put `OptValue` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/mod.rs:100:71: you should put `OptValue` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/mod.rs:100:71: you should put `OptValue` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/mod.rs:1049:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1064:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1090:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1166:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1179:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1184:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1189:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1203:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1211:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1216:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1225:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1229:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:124:1: more than 3 bools in a struct
cargo-0.49.0/src/cargo/util/config/mod.rs:1254:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1279:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1281:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
cargo-0.49.0/src/cargo/util/config/mod.rs:1323:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/config/mod.rs:1339:39: unused `self` argument
cargo-0.49.0/src/cargo/util/config/mod.rs:1344:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1420:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1553:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1560:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1567:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1574:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1581:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1588:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/mod.rs:1598:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/mod.rs:1619:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/mod.rs:1623:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:1623:64: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/util/config/mod.rs:1649:9: use Option::map_or_else instead of an if let/else
cargo-0.49.0/src/cargo/util/config/mod.rs:1699:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/config/mod.rs:1730:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1757:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1770:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1778:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1804:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/mod.rs:1896:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/mod.rs:1901:5: you should put `StringList` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/mod.rs:214:13: wildcard match will miss any future added variants
cargo-0.49.0/src/cargo/util/config/mod.rs:259:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:298:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:311:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:318:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:353:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:401:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:411:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:419:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:431:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:449:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:454:16: use Option::map_or instead of an if let/else
cargo-0.49.0/src/cargo/util/config/mod.rs:547:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:556:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:582:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:595:20: you should put `StringList` between ticks in the documentation
cargo-0.49.0/src/cargo/util/config/mod.rs:689:20: unused `self` argument
cargo-0.49.0/src/cargo/util/config/mod.rs:699:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:699:5: more than 3 bools in function parameters
cargo-0.49.0/src/cargo/util/config/mod.rs:719:58: redundant closure found
cargo-0.49.0/src/cargo/util/config/mod.rs:816:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/config/mod.rs:875:36: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/util/config/mod.rs:876:37: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/util/config/path.rs:10:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/path.rs:14:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/path.rs:48:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/config/target.rs:12:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/config/target.rs:24:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/config/value.rs:29:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/config/value.rs:80:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/config/value.rs:81:9: match expression looks like `matches!` macro
cargo-0.49.0/src/cargo/util/cpu.rs:11:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/cpu.rs:22:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/cpu.rs:82:25: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
cargo-0.49.0/src/cargo/util/cpu.rs:82:9: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
cargo-0.49.0/src/cargo/util/dependency_queue.rs:109:27: redundant closure found
cargo-0.49.0/src/cargo/util/dependency_queue.rs:136:20: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/dependency_queue.rs:151:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/dependency_queue.rs:156:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/dependency_queue.rs:46:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/dependency_queue.rs:91:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:218:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:230:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:242:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:58:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:96:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:96:5: this function has too many lines (110/100)
cargo-0.49.0/src/cargo/util/diagnostic_server.rs:99:21: `msg` is being shadowed
cargo-0.49.0/src/cargo/util/errors.rs:101:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:143:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:150:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:15:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/errors.rs:237:5: variant name ends with the enum's name
cargo-0.49.0/src/cargo/util/errors.rs:245:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:321:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:328:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:356:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:391:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/errors.rs:392:13: usage of wildcard import
cargo-0.49.0/src/cargo/util/errors.rs:465:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/errors.rs:473:5: manual `RangeInclusive::contains` implementation
cargo-0.49.0/src/cargo/util/errors.rs:66:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:115:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:11:5: usage of wildcard import
cargo-0.49.0/src/cargo/util/flock.rs:134:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:142:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:150:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/flock.rs:156:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:170:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/flock.rs:192:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/flock.rs:29:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:321:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/flock.rs:335:23: casting `i64` to `u32` may lose the sign of the value
cargo-0.49.0/src/cargo/util/flock.rs:335:23: casting `i64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/util/flock.rs:335:44: casting `i64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/util/flock.rs:379:35: this `match` has identical arm bodies
cargo-0.49.0/src/cargo/util/flock.rs:37:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:43:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/flock.rs:52:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/graph.rs:10:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/graph.rs:115:13: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/graph.rs:41:51: redundant closure found
cargo-0.49.0/src/cargo/util/graph.rs:45:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/graph.rs:95:13: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/hasher.rs:12:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/hasher.rs:9:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/hex.rs:10:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:11:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:12:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:13:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:14:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:15:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:25:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/hex.rs:6:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/hex.rs:6:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/hex.rs:8:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/hex.rs:9:9: casting `u64` to `u8` may truncate the value
cargo-0.49.0/src/cargo/util/important_paths.rs:23:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/important_paths.rs:6:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/interning.rs:66:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/interning.rs:77:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/into_url.rs:10:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/into_url_with_base.rs:9:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/job.rs:20:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/lev_distance.rs:3:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/lockserver.rs:111:32: redundant else block
cargo-0.49.0/src/cargo/util/lockserver.rs:158:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/lockserver.rs:46:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/lockserver.rs:58:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/lockserver.rs:62:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/mod.rs:68:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/mod.rs:79:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/network.rs:12:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/network.rs:19:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/network.rs:84:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:109:12: redundant else block
cargo-0.49.0/src/cargo/util/paths.rs:114:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:121:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:125:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:130:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:14:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:14:1: item name ends with its containing module's name
cargo-0.49.0/src/cargo/util/paths.rs:151:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:167:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:173:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:178:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:185:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:199:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:215:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:228:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/paths.rs:251:9: use Option::map_or instead of an if let/else
cargo-0.49.0/src/cargo/util/paths.rs:267:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:276:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:29:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/paths.rs:303:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:312:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:346:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:415:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:445:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:459:45: redundant closure found
cargo-0.49.0/src/cargo/util/paths.rs:469:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:54:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/paths.rs:61:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/paths.rs:63:19: use Option::map_or_else instead of an if let/else
cargo-0.49.0/src/cargo/util/paths.rs:88:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/paths.rs:93:31: comparison to empty slice
cargo-0.49.0/src/cargo/util/process_builder.rs:106:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/process_builder.rs:111:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/process_builder.rs:122:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/process_builder.rs:132:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/process_builder.rs:152:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/process_builder.rs:185:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/process_builder.rs:190:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/process_builder.rs:218:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/process_builder.rs:307:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/process_builder.rs:343:39: this argument is passed by value, but not consumed in the function body
cargo-0.49.0/src/cargo/util/progress.rs:122:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/progress.rs:136:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/progress.rs:15:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/progress.rs:249:19: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
cargo-0.49.0/src/cargo/util/progress.rs:249:34: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
cargo-0.49.0/src/cargo/util/progress.rs:250:19: unnecessary boolean `not` operation
cargo-0.49.0/src/cargo/util/progress.rs:263:22: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
cargo-0.49.0/src/cargo/util/progress.rs:264:22: casting `f64` to `usize` may lose the sign of the value
cargo-0.49.0/src/cargo/util/progress.rs:264:22: casting `f64` to `usize` may truncate the value
cargo-0.49.0/src/cargo/util/progress.rs:269:17: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/progress.rs:272:17: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/progress.rs:274:17: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/progress.rs:280:13: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/progress.rs:282:9: calling `push_str()` using a single-character string literal
cargo-0.49.0/src/cargo/util/progress.rs:89:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/progress.rs:97:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/queue.rs:25:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/read2.rs:11:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/read2.rs:31:17: binding's name is too similar to existing binding
cargo-0.49.0/src/cargo/util/restricted_names.rs:13:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/restricted_names.rs:26:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/restricted_names.rs:35:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/restricted_names.rs:45:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/restricted_names.rs:87:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/restricted_names.rs:89:21: redundant closure found
cargo-0.49.0/src/cargo/util/restricted_names.rs:8:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/rustc.rs:103:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/rustc.rs:114:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
cargo-0.49.0/src/cargo/util/rustc.rs:115:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
cargo-0.49.0/src/cargo/util/rustc.rs:162:17: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/rustc.rs:39:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/rustc.rs:55:13: called `find(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/sha256.rs:10:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/sha256.rs:20:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/sha256.rs:31:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/sha256.rs:40:24: integer type suffix should be separated by an underscore
cargo-0.49.0/src/cargo/util/to_semver.rs:5:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:1005:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:1005:5: this function has too many lines (282/100)
cargo-0.49.0/src/cargo/util/toml/mod.rs:1094:36: redundant closure found
cargo-0.49.0/src/cargo/util/toml/mod.rs:1121:13: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/toml/mod.rs:1197:32: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
cargo-0.49.0/src/cargo/util/toml/mod.rs:124:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:1504:9: unused `self` argument
cargo-0.49.0/src/cargo/util/toml/mod.rs:1526:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/toml/mod.rs:1582:19: calling `util::toml::DetailedTomlDependency::default()` is more clear than this expression
cargo-0.49.0/src/cargo/util/toml/mod.rs:1598:5: this function has too many lines (153/100)
cargo-0.49.0/src/cargo/util/toml/mod.rs:1687:33: unnecessary closure used to substitute value for `Option::None`
cargo-0.49.0/src/cargo/util/toml/mod.rs:178:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:248:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:274:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:277:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/toml/mod.rs:281:5: this method could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/toml/mod.rs:285:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:294:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:31:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:381:35: casting `i64` to `u32` may lose the sign of the value
cargo-0.49.0/src/cargo/util/toml/mod.rs:381:35: casting `i64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/util/toml/mod.rs:388:35: casting `u64` to `u32` may truncate the value
cargo-0.49.0/src/cargo/util/toml/mod.rs:398:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:450:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:536:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:783:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:824:1: item name starts with its containing module's name
cargo-0.49.0/src/cargo/util/toml/mod.rs:834:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:83:42: redundant closure found
cargo-0.49.0/src/cargo/util/toml/mod.rs:852:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/toml/mod.rs:852:5: this function has too many lines (138/100)
cargo-0.49.0/src/cargo/util/toml/mod.rs:962:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/toml/mod.rs:971:24: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/toml/mod.rs:979:9: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/toml/mod.rs:98:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/toml/mod.rs:999:23: calling `util::toml::DetailedTomlDependency::default()` is more clear than this expression
cargo-0.49.0/src/cargo/util/toml/targets.rs:112:27: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:325:5: adding items after statements is confusing, since items exist from the start of the scope
cargo-0.49.0/src/cargo/util/toml/targets.rs:586:21: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:593:42: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:605:19: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:612:42: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:756:36: redundant closure found
cargo-0.49.0/src/cargo/util/toml/targets.rs:810:24: called `filter(..).map(..)` on an `Iterator`
cargo-0.49.0/src/cargo/util/vcs.rs:10:1: this function could have a `#[must_use]` attribute
cargo-0.49.0/src/cargo/util/vcs.rs:33:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/vcs.rs:37:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/vcs.rs:43:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/vcs.rs:47:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/vcs.rs:59:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/vcs.rs:66:5: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/workspace.rs:52:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/workspace.rs:56:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/workspace.rs:60:1: docs for function returning `Result` missing `# Errors` section
cargo-0.49.0/src/cargo/util/workspace.rs:64:1: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/error.rs:24:1: item name ends with its containing module's name
iron-0.6.1/src/error.rs:55:20: use of deprecated associated function `std::error::Error::description`: use the Display impl or to_string()
iron-0.6.1/src/iron.rs:105:13: redundant field names in struct initialization
iron-0.6.1/src/iron.rs:119:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/iron.rs:133:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/iron.rs:143:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/iron.rs:148:19: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/iron.rs:149:13: redundant field names in struct initialization
iron-0.6.1/src/iron.rs:167:49: binding's name is too similar to existing binding
iron-0.6.1/src/iron.rs:80:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/iron.rs:85:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/iron.rs:90:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/middleware/mod.rs:137:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/middleware/mod.rs:150:1: item name ends with its containing module's name
iron-0.6.1/src/middleware/mod.rs:152:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/middleware/mod.rs:159:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/middleware/mod.rs:171:1: item name ends with its containing module's name
iron-0.6.1/src/middleware/mod.rs:173:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/middleware/mod.rs:182:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/middleware/mod.rs:192:1: item name ends with its containing module's name
iron-0.6.1/src/middleware/mod.rs:217:25: you should put `ChainBuilder` between ticks in the documentation
iron-0.6.1/src/middleware/mod.rs:328:20: binding's name is too similar to existing binding
iron-0.6.1/src/middleware/mod.rs:360:16: binding's name is too similar to existing binding
iron-0.6.1/src/middleware/mod.rs:368:33: binding's name is too similar to existing binding
iron-0.6.1/src/middleware/mod.rs:428:40: binding's name is too similar to existing binding
iron-0.6.1/src/middleware/mod.rs:434:40: binding's name is too similar to existing binding
iron-0.6.1/src/middleware/mod.rs:444:40: binding's name is too similar to existing binding
iron-0.6.1/src/modifiers.rs:132:14: use of `expect` followed by a function call
iron-0.6.1/src/request/mod.rs:113:24: binding's name is too similar to existing binding
iron-0.6.1/src/request/mod.rs:121:13: redundant field names in struct initialization
iron-0.6.1/src/request/mod.rs:123:13: redundant field names in struct initialization
iron-0.6.1/src/request/mod.rs:124:13: redundant field names in struct initialization
iron-0.6.1/src/request/mod.rs:126:13: redundant field names in struct initialization
iron-0.6.1/src/request/mod.rs:128:13: redundant field names in struct initialization
iron-0.6.1/src/request/mod.rs:153:69: you should put `HttpReader` between ticks in the documentation
iron-0.6.1/src/request/mod.rs:154:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/mod.rs:32:1: this seems like a manual implementation of the non-exhaustive pattern
iron-0.6.1/src/request/mod.rs:62:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:64:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:65:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:66:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:67:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:69:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/mod.rs:75:34: you should put `HttpRequest` between ticks in the documentation
iron-0.6.1/src/request/mod.rs:77:39: you should put `HttpRequest` between ticks in the documentation
iron-0.6.1/src/request/mod.rs:78:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/request/mod.rs:82:13: binding's name is too similar to existing binding
iron-0.6.1/src/request/mod.rs:83:29: binding's name is too similar to existing binding
iron-0.6.1/src/request/mod.rs:85:24: binding's name is too similar to existing binding
iron-0.6.1/src/request/url.rs:109:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:117:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:124:9: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/request/url.rs:129:1: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
iron-0.6.1/src/request/url.rs:21:14: you should put bare URLs between `<`/`>` or make a proper Markdown link
iron-0.6.1/src/request/url.rs:22:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/request/url.rs:31:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/request/url.rs:47:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:52:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:57:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:63:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:73:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:83:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/request/url.rs:96:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/response.rs:121:19: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
iron-0.6.1/src/response.rs:125:43: redundant closure found
iron-0.6.1/src/response.rs:139:41: redundant closure found
iron-0.6.1/src/response.rs:142:23: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/response.rs:143:5: use of deprecated macro `try`: use the `?` operator instead
iron-0.6.1/src/response.rs:24:5: docs for function returning `Result` missing `# Errors` section
iron-0.6.1/src/response.rs:95:5: this method could have a `#[must_use]` attribute
iron-0.6.1/src/response.rs:95:5: you should consider adding a `Default` implementation for `response::Response`
libc-0.2.81/build.rs:114:19: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
libc-0.2.81/build.rs:124:5: this block may be rewritten with the `?` operator
libc-0.2.81/build.rs:133:5: this block may be rewritten with the `?` operator
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:243:17: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/macros.rs:243:17: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/macros.rs:243:17: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/macros.rs:259:17: this function could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:428:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:429:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:431:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:432:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:433:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:434:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:595:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:596:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:597:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:622:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:673:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:696:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:697:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:698:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:699:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:712:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:721:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:722:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:723:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:751:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:752:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:753:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:754:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:755:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:756:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:757:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:758:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:759:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:760:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:768:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:769:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:771:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:772:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:773:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:774:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:775:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:776:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:777:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:778:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:779:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:780:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:781:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:782:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:783:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:784:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:785:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:786:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:787:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:788:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:789:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:790:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:791:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:792:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:794:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:795:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:796:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:797:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:798:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:799:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:800:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:801:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:803:27: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:804:28: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:805:28: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:806:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:807:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:808:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:809:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:810:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:811:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:812:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:813:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:814:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:815:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:816:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:817:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:818:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:821:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:822:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:823:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:824:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:825:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:826:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:827:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:828:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:829:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:830:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:831:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:832:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:833:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:834:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:835:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:836:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:841:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:842:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:843:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:844:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:1120:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:178:34: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:291:5: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:291:5: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:302:5: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:302:5: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:355:13: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:355:13: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:359:13: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:359:13: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:363:13: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:363:13: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:367:13: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:367:13: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:371:13: this method could have a `#[must_use]` attribute
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:371:13: unsafe function's docs miss `# Safety` section
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:534:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:645:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:727:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:728:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:729:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:731:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:732:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:733:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:734:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:735:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:736:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:737:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:738:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:741:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:742:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:743:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:744:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:745:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:746:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:747:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:748:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:749:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:750:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:751:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:752:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:753:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:755:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:756:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:757:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:758:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:759:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:761:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:762:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:763:45: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:764:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:765:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:766:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:767:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:768:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:769:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:770:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:771:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:772:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:773:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:774:45: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:775:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:776:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:803:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:841:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:842:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:982:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/gnu/mod.rs:984:46: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1209:36: casting `i32` to `i16` may truncate the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1210:36: casting `i32` to `i16` may truncate the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1235:39: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1236:41: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1274:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1324:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1333:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1334:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1346:34: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1346:34: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1346:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1347:37: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1347:37: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1347:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1348:36: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1348:36: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1348:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1349:37: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1349:37: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1349:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1350:35: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1350:35: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1350:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1351:36: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1351:36: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1351:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1352:31: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1352:31: integer type suffix should be separated by an underscore
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1352:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1419:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1420:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1421:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1422:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1423:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1490:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1561:46: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1562:45: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1567:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1568:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1586:26: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1587:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1588:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1589:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1897:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1898:51: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1900:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1969:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1970:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1971:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1972:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1973:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1974:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1975:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1976:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1977:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1978:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1979:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1980:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1981:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1982:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1983:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1984:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1985:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1986:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1987:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1988:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1989:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1990:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1991:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1992:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1993:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1994:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1995:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1996:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1997:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1998:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:1999:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2000:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2001:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2002:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2003:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2004:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2005:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2032:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2033:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2034:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2035:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2036:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2037:28: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2038:27: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2039:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2041:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2042:28: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2043:27: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2044:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2045:27: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2046:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2048:28: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2049:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2050:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2051:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2052:26: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2053:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2318:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2321:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2331:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2487:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2488:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2489:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2490:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2491:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2493:47: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2494:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2495:46: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2496:47: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2497:49: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2498:48: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2499:50: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2500:45: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2572:9: unneeded `return` statement
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2578:20: `0 as *mut _` detected
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2588:13: `0 as *mut _` detected
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2596:52: used binding `_dummy` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2597:11: casting `i32` to `usize` may lose the sign of the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2601:21: it is more concise to loop over references to containers instead of using explicit iteration methods
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2611:9: unneeded unit expression
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2619:9: unneeded unit expression
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2634:9: casting `u32` to `i32` may wrap around the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2647:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2648:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2649:9: casting `u64` to `u32` may truncate the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2654:18: the operation is ineffective. Consider reducing it to `(dev & 0x00000000000000ff)`
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2654:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2655:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2656:9: casting `u64` to `u32` may truncate the value
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2660:21: casting `u32` to `u64` may become silently lossy if you later change the type
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2661:21: casting `u32` to `u64` may become silently lossy if you later change the type
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2663:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2664:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2665:16: the operation is ineffective. Consider reducing it to `(minor & 0x000000ff)`
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2665:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:2666:25: long literal lacking separators
libc-0.2.81/src/unix/linux_like/linux/mod.rs:40:1: enum with no variants
libc-0.2.81/src/unix/linux_like/linux/mod.rs:954:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1000:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1001:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1002:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1016:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1017:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1018:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1019:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1020:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1029:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1030:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1031:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1032:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1033:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1034:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1035:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1041:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1042:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1043:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1044:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1045:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1046:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1047:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1048:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1049:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1050:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1051:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1053:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1054:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1055:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1056:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1057:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1058:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1059:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1060:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1073:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1074:43: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1075:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1076:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1077:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1078:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1079:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1080:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1081:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1082:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1083:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1084:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1086:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1087:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1089:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1090:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1091:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1094:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1095:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1096:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1097:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1098:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1099:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1100:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1101:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1102:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1105:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1106:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1107:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1108:42: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1109:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1110:46: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1111:41: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1112:44: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1113:40: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1114:47: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1115:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1126:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1127:29: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1128:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1179:32: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1180:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:1218:27: the operation is ineffective. Consider reducing it to `IPOPT_CONTROL`
libc-0.2.81/src/unix/linux_like/mod.rs:1314:9: operator precedence can trip the unwary
libc-0.2.81/src/unix/linux_like/mod.rs:1323:13: `0 as *mut _` detected
libc-0.2.81/src/unix/linux_like/mod.rs:1332:9: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
libc-0.2.81/src/unix/linux_like/mod.rs:1337:9: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
libc-0.2.81/src/unix/linux_like/mod.rs:1341:18: casting `i32` to `usize` may lose the sign of the value
libc-0.2.81/src/unix/linux_like/mod.rs:1344:9: unneeded `return` statement
libc-0.2.81/src/unix/linux_like/mod.rs:1348:18: casting `i32` to `usize` may lose the sign of the value
libc-0.2.81/src/unix/linux_like/mod.rs:1350:9: unneeded `return` statement
libc-0.2.81/src/unix/linux_like/mod.rs:1354:18: casting `i32` to `usize` may lose the sign of the value
libc-0.2.81/src/unix/linux_like/mod.rs:1357:9: unneeded `return` statement
libc-0.2.81/src/unix/linux_like/mod.rs:1361:21: it is more concise to loop over references to containers instead of using explicit iteration methods
libc-0.2.81/src/unix/linux_like/mod.rs:1381:9: casting `i32` to `i8` may truncate the value
libc-0.2.81/src/unix/linux_like/mod.rs:1389:9: bit mask could be simplified with a call to `trailing_zeros`
libc-0.2.81/src/unix/linux_like/mod.rs:446:31: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:591:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:592:38: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:593:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:594:33: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:595:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:596:36: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:597:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:598:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:599:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:600:34: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:601:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:602:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:607:37: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:608:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:764:35: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:765:39: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:991:30: long literal lacking separators
libc-0.2.81/src/unix/linux_like/mod.rs:9:1: enum with no variants
libc-0.2.81/src/unix/mod.rs:198:29: long literal lacking separators
libc-0.2.81/src/unix/mod.rs:199:28: long literal lacking separators
libc-0.2.81/src/unix/mod.rs:201:35: casting integer literal to `usize` is unnecessary
libc-0.2.81/src/unix/mod.rs:202:35: casting integer literal to `usize` is unnecessary
libc-0.2.81/src/unix/mod.rs:282:40: long literal lacking separators
libc-0.2.81/src/unix/mod.rs:284:41: long literal lacking separators
libc-0.2.81/src/unix/mod.rs:285:36: long literal lacking separators
libc-0.2.81/src/unix/mod.rs:34:1: enum with no variants
libc-0.2.81/src/unix/mod.rs:386:1: enum with no variants
libc-0.2.81/src/unix/mod.rs:394:1: enum with no variants
log-0.4.11/src/lib.rs:1047:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1053:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1059:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1093:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1093:5: you should consider adding a `Default` implementation for `MetadataBuilder<'a>`
log-0.4.11/src/lib.rs:1118:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1177:1: you have declared `#[inline(always)]` on `max_level`. This is usually a bad idea
log-0.4.11/src/lib.rs:1178:1: this function could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1306:1: docs for function returning `Result` missing `# Errors` section
log-0.4.11/src/lib.rs:1358:1: this function could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:1359:5: unnecessary `!=` operation
log-0.4.11/src/lib.rs:1407:1: this function could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:329:27: you are deriving `Hash` but have implemented `PartialEq` explicitly
log-0.4.11/src/lib.rs:356:1: you are implementing `Clone` explicitly on a `Copy` type
log-0.4.11/src/lib.rs:448:12: manual `RangeInclusive::contains` implementation
log-0.4.11/src/lib.rs:468:13: called `filter(..).map(..)` on an `Iterator`
log-0.4.11/src/lib.rs:500:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:506:28: this argument (8 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
log-0.4.11/src/lib.rs:506:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:520:27: you are deriving `Hash` but have implemented `PartialEq` explicitly
log-0.4.11/src/lib.rs:538:1: you are implementing `Clone` explicitly on a `Copy` type
log-0.4.11/src/lib.rs:653:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:661:21: this argument (8 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
log-0.4.11/src/lib.rs:661:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:677:44: this `match` has identical arm bodies
log-0.4.11/src/lib.rs:758:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:764:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:770:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:776:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:782:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:788:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:794:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:803:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:809:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:818:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:908:5: this method could have a `#[must_use]` attribute
log-0.4.11/src/lib.rs:908:5: you should consider adding a `Default` implementation for `RecordBuilder<'a>`
log-0.4.11/src/lib.rs:995:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/detection.rs:2:5: usage of wildcard import
proc-macro2-1.0.24/src/fallback.rs:108:17: wildcard match will miss any future added variants
proc-macro2-1.0.24/src/fallback.rs:269:20: unused `self` argument
proc-macro2-1.0.24/src/fallback.rs:430:24: this argument (0 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/fallback.rs:437:23: this argument (0 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/fallback.rs:437:23: unused `self` argument
proc-macro2-1.0.24/src/fallback.rs:471:17: this argument (0 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/fallback.rs:471:17: unused `self` argument
proc-macro2-1.0.24/src/fallback.rs:654:5: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:655:12: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:661:5: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:662:12: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:664:12: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:674:37: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/fallback.rs:678:5: adding items after statements is confusing, since items exist from the start of the scope
proc-macro2-1.0.24/src/fallback.rs:85:9: adding items after statements is confusing, since items exist from the start of the scope
proc-macro2-1.0.24/src/fallback.rs:882:43: unused `self` argument
proc-macro2-1.0.24/src/lib.rs:1017:9: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1081:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1099:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1117:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1135:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1141:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1146:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1151:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:1156:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:152:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:157:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:373:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:383:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:397:24: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/lib.rs:397:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:403:23: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/lib.rs:403:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:418:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:425:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:464:17: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/lib.rs:500:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:626:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:633:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:641:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:652:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:662:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:672:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:734:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:743:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:752:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:757:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:788:19: you should put `XID_Start` between ticks in the documentation
proc-macro2-1.0.24/src/lib.rs:788:69: you should put `XID_Continue` between ticks in the documentation
proc-macro2-1.0.24/src/lib.rs:891:36: you should put `syn::parse_str` between ticks in the documentation
proc-macro2-1.0.24/src/lib.rs:894:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:911:5: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/lib.rs:996:9: this method could have a `#[must_use]` attribute
proc-macro2-1.0.24/src/parse.rs:552:5: this loop could be written as a `for` loop
proc-macro2-1.0.24/src/parse.rs:584:21: manual `RangeInclusive::contains` implementation
proc-macro2-1.0.24/src/parse.rs:602:20: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
proc-macro2-1.0.24/src/parse.rs:696:29: casting `u8` to `u64` may become silently lossy if you later change the type
proc-macro2-1.0.24/src/parse.rs:702:34: casting `u8` to `u64` may become silently lossy if you later change the type
proc-macro2-1.0.24/src/parse.rs:708:34: casting `u8` to `u64` may become silently lossy if you later change the type
proc-macro2-1.0.24/src/parse.rs:803:15: it is more concise to loop over references to containers instead of using explicit iteration methods
proc-macro2-1.0.24/src/parse.rs:808:15: it is more concise to loop over references to containers instead of using explicit iteration methods
proc-macro2-1.0.24/src/wrapper.rs:415:24: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/wrapper.rs:429:23: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
proc-macro2-1.0.24/src/wrapper.rs:492:17: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
quote-1.0.7/src/ext.rs:10:1: item name ends with its containing module's name
quote-1.0.7/src/ext.rs:7:5: you should put `TokenStream` between ticks in the documentation
quote-1.0.7/src/ident_fragment.rs:13:5: docs for function returning `Result` missing `# Errors` section
quote-1.0.7/src/ident_fragment.rs:51:31: stripping a prefix manually
quote-1.0.7/src/runtime.rs:52:5: item name ends with its containing module's name
quote-1.0.7/src/runtime.rs:63:5: item name ends with its containing module's name
quote-1.0.7/src/runtime.rs:66:33: you should put `DoesNotHaveIter` between ticks in the documentation
quote-1.0.7/src/runtime.rs:80:5: item name ends with its containing module's name
rand-0.7.3/src/distributions/bernoulli.rs:103:20: casting `f64` to `u64` may lose the sign of the value
rand-0.7.3/src/distributions/bernoulli.rs:103:20: casting `f64` to `u64` may truncate the value
rand-0.7.3/src/distributions/bernoulli.rs:116:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/distributions/bernoulli.rs:123:21: casting `f64` to `u64` may lose the sign of the value
rand-0.7.3/src/distributions/bernoulli.rs:123:21: casting `f64` to `u64` may truncate the value
rand-0.7.3/src/distributions/bernoulli.rs:63:26: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/bernoulli.rs:63:27: integer type suffix should be separated by an underscore
rand-0.7.3/src/distributions/bernoulli.rs:67:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/bernoulli.rs:95:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/distributions/bernoulli.rs:96:13: manual `Range::contains` implementation
rand-0.7.3/src/distributions/binomial.rs:107:23: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:112:44: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:116:13: adding items after statements is confusing, since items exist from the start of the scope
rand-0.7.3/src/distributions/binomial.rs:150:28: redundant else block
rand-0.7.3/src/distributions/binomial.rs:153:24: unnecessary boolean `not` operation
rand-0.7.3/src/distributions/binomial.rs:158:28: redundant else block
rand-0.7.3/src/distributions/binomial.rs:164:33: casting `i64` to `u64` may lose the sign of the value
rand-0.7.3/src/distributions/binomial.rs:166:28: redundant else block
rand-0.7.3/src/distributions/binomial.rs:175:47: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:185:38: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:194:38: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:202:28: redundant else block
rand-0.7.3/src/distributions/binomial.rs:209:25: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:221:26: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:222:26: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:223:25: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:224:25: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:226:17: adding items after statements is confusing, since items exist from the start of the scope
rand-0.7.3/src/distributions/binomial.rs:233:32: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:234:27: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:251:22: casting `i64` to `u64` may lose the sign of the value
rand-0.7.3/src/distributions/binomial.rs:255:9: unnecessary `!=` operation
rand-0.7.3/src/distributions/binomial.rs:35:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/binomial.rs:45:17: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:46:5: casting `f64` to `i64` may truncate the value
rand-0.7.3/src/distributions/binomial.rs:50:5: this function has too many lines (143/100)
rand-0.7.3/src/distributions/binomial.rs:76:9: adding items after statements is confusing, since items exist from the start of the scope
rand-0.7.3/src/distributions/binomial.rs:78:12: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:81:21: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:82:32: casting `u64` to `i32` may truncate the value
rand-0.7.3/src/distributions/binomial.rs:88:26: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/binomial.rs:99:21: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/distributions/cauchy.rs:33:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/dirichlet.rs:52:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/dirichlet.rs:64:32: float type suffix should be separated by an underscore
rand-0.7.3/src/distributions/dirichlet.rs:65:23: float type suffix should be separated by an underscore
rand-0.7.3/src/distributions/exponential.rs:76:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/float.rs:73:1: item name ends with its containing module's name
rand-0.7.3/src/distributions/gamma.rs:13:5: usage of wildcard import for enum variants
rand-0.7.3/src/distributions/gamma.rs:14:5: usage of wildcard import for enum variants
rand-0.7.3/src/distributions/gamma.rs:189:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/gamma.rs:230:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/gamma.rs:259:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/gamma.rs:287:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/gamma.rs:90:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/integer.rs:23:9: casting `u32` to `u8` may truncate the value
rand-0.7.3/src/distributions/integer.rs:30:9: casting `u32` to `u16` may truncate the value
rand-0.7.3/src/distributions/integer.rs:69:9: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
rand-0.7.3/src/distributions/mod.rs:263:5: you have declared `#[inline(always)]` on `next`. This is usually a bad idea
rand-0.7.3/src/distributions/normal.rs:100:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/normal.rs:119:1: item name ends with its containing module's name
rand-0.7.3/src/distributions/normal.rs:131:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/normal.rs:31:1: item name ends with its containing module's name
rand-0.7.3/src/distributions/normal.rs:47:25: float type suffix should be separated by an underscore
rand-0.7.3/src/distributions/normal.rs:48:25: float type suffix should be separated by an underscore
rand-0.7.3/src/distributions/other.rs:89:9: casting `u32` to `i32` may wrap around the value
rand-0.7.3/src/distributions/pareto.rs:32:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/poisson.rs:35:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/poisson.rs:87:30: casting `f64` to `u64` may lose the sign of the value
rand-0.7.3/src/distributions/poisson.rs:87:30: casting `f64` to `u64` may truncate the value
rand-0.7.3/src/distributions/triangular.rs:32:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/uniform.rs:146:4: needless `fn main` in doctest
rand-0.7.3/src/distributions/uniform.rs:199:1: item name ends with its containing module's name
rand-0.7.3/src/distributions/uniform.rs:214:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/uniform.rs:283:14: you should put `SampleUniform` between ticks in the documentation
rand-0.7.3/src/distributions/uniform.rs:283:46: you should put `SampleUniform` between ticks in the documentation
rand-0.7.3/src/distributions/uniform.rs:296:5: you have declared `#[inline(always)]` on `borrow`. This is usually a bad idea
rand-0.7.3/src/distributions/uniform.rs:304:5: you have declared `#[inline(always)]` on `borrow`. This is usually a bad idea
rand-0.7.3/src/distributions/uniform.rs:350:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:407:21: redundant field names in struct initialization
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:441:31: because of the numeric bounds on `::core::u16::MAX` prior to casting, this expression is always false
rand-0.7.3/src/distributions/uniform.rs:56:10: you should put `SampleBorrow` between ticks in the documentation
rand-0.7.3/src/distributions/uniform.rs:647:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/uniform.rs:840:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/uniform.rs:913:13: use Option::map_or_else instead of an if let/else
rand-0.7.3/src/distributions/uniform.rs:943:54: casting `u64` to `u32` may truncate the value
rand-0.7.3/src/distributions/unit_circle.rs:30:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/unit_sphere.rs:24:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/unit_sphere.rs:29:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/utils.rs:247:15: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name
rand-0.7.3/src/distributions/utils.rs:248:20: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name
rand-0.7.3/src/distributions/utils.rs:249:18: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name
rand-0.7.3/src/distributions/utils.rs:254:5: you have declared `#[inline(always)]` on `lanes`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:258:5: you have declared `#[inline(always)]` on `splat`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:262:5: you have declared `#[inline(always)]` on `extract`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:267:5: you have declared `#[inline(always)]` on `replace`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:281:5: you have declared `#[inline(always)]` on `any`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:286:5: you have declared `#[inline(always)]` on `all`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:291:5: you have declared `#[inline(always)]` on `none`. This is usually a bad idea
rand-0.7.3/src/distributions/utils.rs:488:17: you should put `x_i` between ticks in the documentation
rand-0.7.3/src/distributions/utils.rs:489:50: you should put `x_i` between ticks in the documentation
rand-0.7.3/src/distributions/utils.rs:489:63: you should put `f(x_i` between ticks in the documentation
rand-0.7.3/src/distributions/utils.rs:490:40: you should put `f(x_i` between ticks in the documentation
rand-0.7.3/src/distributions/utils.rs:490:49: you should put `f(x_{i+1` between ticks in the documentation
rand-0.7.3/src/distributions/utils.rs:518:17: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
rand-0.7.3/src/distributions/weibull.rs:29:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/distributions/weighted/alias_method.rs:113:21: it is more concise to loop over references to containers instead of using explicit iteration methods
rand-0.7.3/src/distributions/weighted/alias_method.rs:125:9: adding items after statements is confusing, since items exist from the start of the scope
rand-0.7.3/src/distributions/weighted/alias_method.rs:131:9: adding items after statements is confusing, since items exist from the start of the scope
rand-0.7.3/src/distributions/weighted/alias_method.rs:180:36: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand-0.7.3/src/distributions/weighted/alias_method.rs:182:34: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand-0.7.3/src/distributions/weighted/alias_method.rs:259:28: using `clone` on type `distributions::uniform::Uniform<u32>` which implements the `Copy` trait
rand-0.7.3/src/distributions/weighted/alias_method.rs:296:9: you are using an explicit closure for copying elements
rand-0.7.3/src/distributions/weighted/alias_method.rs:321:9: you are using an explicit closure for copying elements
rand-0.7.3/src/distributions/weighted/alias_method.rs:78:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/distributions/weighted/alias_method.rs:78:5: this function has too many lines (106/100)
rand-0.7.3/src/distributions/weighted/alias_method.rs:85:17: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand-0.7.3/src/distributions/weighted/alias_method.rs:87:31: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
rand-0.7.3/src/distributions/weighted/mod.rs:100:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/distributions/weighted/mod.rs:144:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/distributions/weighted/mod.rs:169:16: unnecessary `>= y + 1` or `x - 1 >=`
rand-0.7.3/src/distributions/weighted/mod.rs:386:1: item name starts with its containing module's name
rand-0.7.3/src/distributions/weighted/mod.rs:85:1: item name starts with its containing module's name
rand-0.7.3/src/lib.rs:333:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/lib.rs:404:14: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name
rand-0.7.3/src/lib.rs:552:1: this function could have a `#[must_use]` attribute
rand-0.7.3/src/rngs/adapter/read.rs:47:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/adapter/read.rs:89:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/adapter/reseeding.rs:100:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/rngs/adapter/reseeding.rs:112:5: you have declared `#[inline(always)]` on `next_u32`. This is usually a bad idea
rand-0.7.3/src/rngs/adapter/reseeding.rs:117:5: you have declared `#[inline(always)]` on `next_u64`. This is usually a bad idea
rand-0.7.3/src/rngs/adapter/reseeding.rs:198:13: casting `u64` to `i64` may wrap around the value
rand-0.7.3/src/rngs/adapter/reseeding.rs:231:9: casting `usize` to `isize` may wrap around the value
rand-0.7.3/src/rngs/adapter/reseeding.rs:27:28: you should put `ChaCha` between ticks in the documentation
rand-0.7.3/src/rngs/adapter/reseeding.rs:79:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/entropy.rs:24:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/entropy.rs:34:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/rngs/mock.rs:36:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/rngs/mock.rs:47:9: casting `u64` to `u32` may truncate the value
rand-0.7.3/src/rngs/mod.rs:61:74: you should put `ChaCha20` between ticks in the documentation
rand-0.7.3/src/rngs/std.rs:25:39: you should put `ChaCha` between ticks in the documentation
rand-0.7.3/src/rngs/std.rs:32:10: you should put `rand_chacha` between ticks in the documentation
rand-0.7.3/src/rngs/std.rs:36:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/std.rs:39:5: you have declared `#[inline(always)]` on `next_u32`. This is usually a bad idea
rand-0.7.3/src/rngs/std.rs:44:5: you have declared `#[inline(always)]` on `next_u64`. This is usually a bad idea
rand-0.7.3/src/rngs/std.rs:49:5: you have declared `#[inline(always)]` on `fill_bytes`. This is usually a bad idea
rand-0.7.3/src/rngs/std.rs:54:5: you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea
rand-0.7.3/src/rngs/std.rs:63:5: you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea
rand-0.7.3/src/rngs/std.rs:68:5: you have declared `#[inline(always)]` on `from_rng`. This is usually a bad idea
rand-0.7.3/src/rngs/thread.rs:57:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/thread.rs:80:1: item name starts with its containing module's name
rand-0.7.3/src/rngs/thread.rs:80:1: this function could have a `#[must_use]` attribute
rand-0.7.3/src/rngs/thread.rs:81:35: redundant closure found
rand-0.7.3/src/rngs/thread.rs:93:5: you have declared `#[inline(always)]` on `next_u32`. This is usually a bad idea
rand-0.7.3/src/rngs/thread.rs:98:5: you have declared `#[inline(always)]` on `next_u64`. This is usually a bad idea
rand-0.7.3/src/seq/index.rs:127:1: item name starts with its containing module's name
rand-0.7.3/src/seq/index.rs:139:13: usage of wildcard import for enum variants
rand-0.7.3/src/seq/index.rs:159:1: item name starts with its containing module's name
rand-0.7.3/src/seq/index.rs:171:13: usage of wildcard import for enum variants
rand-0.7.3/src/seq/index.rs:180:13: usage of wildcard import for enum variants
rand-0.7.3/src/seq/index.rs:223:18: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand-0.7.3/src/seq/index.rs:224:18: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand-0.7.3/src/seq/index.rs:233:25: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
rand-0.7.3/src/seq/index.rs:236:27: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
rand-0.7.3/src/seq/index.rs:244:12: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
rand-0.7.3/src/seq/index.rs:244:37: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
rand-0.7.3/src/seq/index.rs:29:1: item name starts with its containing module's name
rand-0.7.3/src/seq/index.rs:39:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:48:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:60:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:69:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:78:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:87:5: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`
rand-0.7.3/src/seq/index.rs:87:5: this method could have a `#[must_use]` attribute
rand-0.7.3/src/seq/index.rs:97:13: usage of wildcard import for enum variants
rand-0.7.3/src/seq/mod.rs:141:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/seq/mod.rs:168:5: docs for function returning `Result` missing `# Errors` section
rand-0.7.3/src/seq/mod.rs:229:4: needless `fn main` in doctest
rand-0.7.3/src/seq/mod.rs:292:29: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
rand-0.7.3/src/seq/mod.rs:410:23: calling `std::marker::PhantomData::default()` is more clear than this expression
rand-0.7.3/src/seq/mod.rs:45:4: needless `fn main` in doctest
rand-0.7.3/src/seq/mod.rs:527:26: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rand_core-0.6.0/src/block.rs:117:1: item name starts with its containing module's name
rand_core-0.6.0/src/block.rs:153:5: you have declared `#[inline(always)]` on `index`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:230:5: you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:240:5: you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:245:5: you have declared `#[inline(always)]` on `seed_from_u64`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:250:5: you have declared `#[inline(always)]` on `from_rng`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:280:1: item name starts with its containing module's name
rand_core-0.6.0/src/block.rs:319:5: you have declared `#[inline(always)]` on `index`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:405:5: you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:415:5: you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:420:5: you have declared `#[inline(always)]` on `seed_from_u64`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:425:5: you have declared `#[inline(always)]` on `from_rng`. This is usually a bad idea
rand_core-0.6.0/src/block.rs:67:14: you should put `module][crate::block` between ticks in the documentation
rand_core-0.6.0/src/block.rs:68:1: item name starts with its containing module's name
rand_core-0.6.0/src/error.rs:106:5: this method could have a `#[must_use]` attribute
rand_core-0.6.0/src/error.rs:87:5: this method could have a `#[must_use]` attribute
rand_core-0.6.0/src/error.rs:95:74: casting `u32` to `i32` may wrap around the value
rand_core-0.6.0/src/lib.rs:179:5: docs for function returning `Result` missing `# Errors` section
rand_core-0.6.0/src/lib.rs:301:5: this method could have a `#[must_use]` attribute
rand_core-0.6.0/src/lib.rs:303:26: long literal lacking separators
rand_core-0.6.0/src/lib.rs:304:26: long literal lacking separators
rand_core-0.6.0/src/lib.rs:313:30: casting `u64` to `u32` may truncate the value
rand_core-0.6.0/src/lib.rs:314:23: casting `u64` to `u32` may truncate the value
rand_core-0.6.0/src/lib.rs:346:5: docs for function returning `Result` missing `# Errors` section
rand_core-0.6.0/src/lib.rs:381:5: you have declared `#[inline(always)]` on `next_u32`. This is usually a bad idea
rand_core-0.6.0/src/lib.rs:386:5: you have declared `#[inline(always)]` on `next_u64`. This is usually a bad idea
rand_core-0.6.0/src/lib.rs:391:5: you have declared `#[inline(always)]` on `fill_bytes`. This is usually a bad idea
rand_core-0.6.0/src/lib.rs:396:5: you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea
rayon-1.5.0/src/collections/binary_heap.rs:7:5: usage of wildcard import
rayon-1.5.0/src/collections/binary_heap.rs:8:5: usage of wildcard import
rayon-1.5.0/src/collections/btree_map.rs:7:5: usage of wildcard import
rayon-1.5.0/src/collections/btree_map.rs:8:5: usage of wildcard import
rayon-1.5.0/src/collections/btree_set.rs:7:5: usage of wildcard import
rayon-1.5.0/src/collections/btree_set.rs:8:5: usage of wildcard import
rayon-1.5.0/src/collections/hash_map.rs:10:5: usage of wildcard import
rayon-1.5.0/src/collections/hash_map.rs:9:5: usage of wildcard import
rayon-1.5.0/src/collections/hash_set.rs:10:5: usage of wildcard import
rayon-1.5.0/src/collections/hash_set.rs:9:5: usage of wildcard import
rayon-1.5.0/src/collections/linked_list.rs:7:5: usage of wildcard import
rayon-1.5.0/src/collections/linked_list.rs:8:5: usage of wildcard import
rayon-1.5.0/src/collections/mod.rs:59:32: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
rayon-1.5.0/src/collections/vec_deque.rs:8:5: usage of wildcard import
rayon-1.5.0/src/collections/vec_deque.rs:9:5: usage of wildcard import
rayon-1.5.0/src/compile_fail/cannot_collect_filtermap_data.rs:2:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/cannot_zip_filtered_data.rs:2:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/cell_par_iter.rs:2:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/no_send_par_iter.rs:25:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/no_send_par_iter.rs:46:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/no_send_par_iter.rs:4:1: needless `fn main` in doctest
rayon-1.5.0/src/compile_fail/rc_par_iter.rs:2:1: needless `fn main` in doctest
rayon-1.5.0/src/iter/chain.rs:103:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/chain.rs:122:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/chain.rs:128:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/chain.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/chain.rs:221:36: you should put `ExactSizeIterator` between ticks in the documentation
rayon-1.5.0/src/iter/chain.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/chain.rs:51:38: use Option::map_or_else instead of an if let/else
rayon-1.5.0/src/iter/chain.rs:58:14: `a` is being shadowed
rayon-1.5.0/src/iter/chain.rs:58:17: `b` is being shadowed
rayon-1.5.0/src/iter/chain.rs:78:14: `a` is being shadowed
rayon-1.5.0/src/iter/chain.rs:78:17: `b` is being shadowed
rayon-1.5.0/src/iter/chain.rs:97:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/chunks.rs:3:5: usage of wildcard import
rayon-1.5.0/src/iter/chunks.rs:4:5: usage of wildcard import
rayon-1.5.0/src/iter/chunks.rs:77:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/chunks.rs:83:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/cloned.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/cloned.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/cloned.rs:71:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/cloned.rs:75:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/collect/consumer.rs:141:5: you should put `CollectReducer` between ticks in the documentation
rayon-1.5.0/src/iter/collect/consumer.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/collect/consumer.rs:28:5: you should put `CollectResult` between ticks in the documentation
rayon-1.5.0/src/iter/collect/consumer.rs:36:37: generally you want to avoid `&mut &mut _` if possible
rayon-1.5.0/src/iter/collect/consumer.rs:36:37: generally you want to avoid `&mut &mut _` if possible
rayon-1.5.0/src/iter/collect/mod.rs:154:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
rayon-1.5.0/src/iter/copied.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/copied.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/copied.rs:71:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/copied.rs:75:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/empty.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/empty.rs:24:1: this function could have a `#[must_use]` attribute
rayon-1.5.0/src/iter/empty.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/enumerate.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/enumerate.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/enumerate.rs:64:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/enumerate.rs:68:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/extend.rs:143:63: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:182:57: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:218:32: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:218:59: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:25:42: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:287:62: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:322:56: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:41:27: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:47:30: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:47:56: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:47:74: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:53:29: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:57:36: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/extend.rs:59:61: I see you're using a LinkedList! Perhaps you meant some other data structure?
rayon-1.5.0/src/iter/filter.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/filter.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/filter_map.rs:123:9: use Option::map_or instead of an if let/else
rayon-1.5.0/src/iter/filter_map.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/filter_map.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/find.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/find.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/find_first_last/mod.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/find_first_last/mod.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/find_first_last/mod.rs:32:67: you should put `MatchPosition` between ticks in the documentation
rayon-1.5.0/src/iter/flat_map.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/flat_map.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/flat_map_iter.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/flat_map_iter.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/flatten.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/flatten.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/flatten_iter.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/flatten_iter.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/fold.rs:158:13: binding's name is too similar to existing binding
rayon-1.5.0/src/iter/fold.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/fold.rs:204:1: item name starts with its containing module's name
rayon-1.5.0/src/iter/fold.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/for_each.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/for_each.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/inspect.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/inspect.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/inspect.rs:83:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/inspect.rs:88:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/interleave.rs:111:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/interleave.rs:119:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/interleave.rs:195:30: you should put `self.i_len` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:195:43: you should put `self.j_len` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:199:23: you should put `self.i_len` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/interleave.rs:200:23: you should put `self.j_len` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:249:41: you should put `DoubleEndedIterator` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:250:5: you should put `ExactSizeIterator` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:263:33: you should put `InterleaveSeq` between ticks in the documentation
rayon-1.5.0/src/iter/interleave.rs:280:17: wildcard match will miss any future added variants
rayon-1.5.0/src/iter/interleave.rs:285:17: wildcard match will miss any future added variants
rayon-1.5.0/src/iter/interleave.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/interleave.rs:313:9: `if` chain can be rewritten with `match`
rayon-1.5.0/src/iter/interleave.rs:82:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/interleave.rs:90:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/interleave_shortest.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/intersperse.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/intersperse.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/intersperse.rs:90:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/intersperse.rs:96:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/len.rs:12:1: item name ends with its containing module's name
rayon-1.5.0/src/iter/len.rs:146:1: item name ends with its containing module's name
rayon-1.5.0/src/iter/len.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/len.rs:200:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/len.rs:205:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/len.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/len.rs:66:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/len.rs:71:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/map.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/map.rs:84:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map.rs:89:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map_with.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/map_with.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/map_with.rs:419:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map_with.rs:425:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map_with.rs:90:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/map_with.rs:96:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/mod.rs:1874:24: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
rayon-1.5.0/src/iter/mod.rs:2171:1: trait `IndexedParallelIterator` has a `len` method but no (possibly inherited) `is_empty` method
rayon-1.5.0/src/iter/mod.rs:2371:26: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
rayon-1.5.0/src/iter/mod.rs:2411:26: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
rayon-1.5.0/src/iter/mod.rs:82:5: usage of wildcard import
rayon-1.5.0/src/iter/multizip.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/multizip.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/noop.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/once.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/once.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/panic_fuse.rs:102:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/panic_fuse.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/panic_fuse.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/panic_fuse.rs:98:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/par_bridge.rs:136:28: redundant else block
rayon-1.5.0/src/iter/par_bridge.rs:163:28: redundant else block
rayon-1.5.0/src/iter/plumbing/mod.rs:216:58: you should put `find_first` between ticks in the documentation
rayon-1.5.0/src/iter/plumbing/mod.rs:359:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/plumbing/mod.rs:364:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/plumbing/mod.rs:399:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/plumbing/mod.rs:53:19: you should put `DoubleEndedIterator` between ticks in the documentation
rayon-1.5.0/src/iter/plumbing/mod.rs:53:43: you should put `ExactSizeIterator` between ticks in the documentation
rayon-1.5.0/src/iter/plumbing/mod.rs:54:31: you should put `IntoIterator` between ticks in the documentation
rayon-1.5.0/src/iter/plumbing/mod.rs:55:5: you should put `IntoIterator` between ticks in the documentation
rayon-1.5.0/src/iter/positions.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/positions.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/product.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/reduce.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/repeat.rs:103:1: item name starts with its containing module's name
rayon-1.5.0/src/iter/repeat.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/repeat.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/rev.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/rev.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/rev.rs:63:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/rev.rs:68:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/skip.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/skip.rs:3:5: usage of wildcard import
rayon-1.5.0/src/iter/skip.rs:68:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/skip.rs:73:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/splitter.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/splitter.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/step_by.rs:4:5: usage of wildcard import
rayon-1.5.0/src/iter/step_by.rs:5:5: usage of wildcard import
rayon-1.5.0/src/iter/step_by.rs:73:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/step_by.rs:79:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/sum.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/take.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/take.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/take.rs:67:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/take.rs:72:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/try_fold.rs:190:1: item name starts with its containing module's name
rayon-1.5.0/src/iter/try_fold.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/try_fold.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/try_reduce.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/try_reduce_with.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/unzip.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/unzip.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/update.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/update.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/update.rs:82:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/update.rs:87:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/while_some.rs:130:22: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
rayon-1.5.0/src/iter/while_some.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/while_some.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/zip.rs:102:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/zip.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/zip.rs:2:5: usage of wildcard import
rayon-1.5.0/src/iter/zip.rs:74:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/zip.rs:79:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/zip.rs:97:9: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/iter/zip_eq.rs:1:5: usage of wildcard import
rayon-1.5.0/src/iter/zip_eq.rs:2:5: usage of wildcard import
rayon-1.5.0/src/option.rs:8:5: usage of wildcard import
rayon-1.5.0/src/option.rs:9:5: usage of wildcard import
rayon-1.5.0/src/par_either.rs:1:5: usage of wildcard import
rayon-1.5.0/src/par_either.rs:3:5: usage of wildcard import
rayon-1.5.0/src/private.rs:9:1: item name starts with its containing module's name
rayon-1.5.0/src/range.rs:19:5: usage of wildcard import
rayon-1.5.0/src/range.rs:20:5: usage of wildcard import
rayon-1.5.0/src/range_inclusive.rs:194:9: an inclusive range would be more readable
rayon-1.5.0/src/range_inclusive.rs:194:9: an inclusive range would be more readable
rayon-1.5.0/src/range_inclusive.rs:19:5: usage of wildcard import
rayon-1.5.0/src/range_inclusive.rs:209:9: an inclusive range would be more readable
rayon-1.5.0/src/range_inclusive.rs:209:9: an inclusive range would be more readable
rayon-1.5.0/src/range_inclusive.rs:20:5: usage of wildcard import
rayon-1.5.0/src/range_inclusive.rs:231:9: an inclusive range would be more readable
rayon-1.5.0/src/range_inclusive.rs:231:9: an inclusive range would be more readable
rayon-1.5.0/src/result.rs:8:5: usage of wildcard import
rayon-1.5.0/src/result.rs:9:5: usage of wildcard import
rayon-1.5.0/src/slice/mergesort.rs:102:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:109:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:114:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:211:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:217:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:251:5: you should put `TimSort` between ticks in the documentation
rayon-1.5.0/src/slice/mergesort.rs:252:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
rayon-1.5.0/src/slice/mergesort.rs:286:59: you should put `TimSort` between ticks in the documentation
rayon-1.5.0/src/slice/mergesort.rs:333:24: redundant else block
rayon-1.5.0/src/slice/mergesort.rs:513:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:521:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mergesort.rs:7:5: usage of wildcard import
rayon-1.5.0/src/slice/mergesort.rs:98:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/mod.rs:15:5: usage of wildcard import
rayon-1.5.0/src/slice/mod.rs:16:5: usage of wildcard import
rayon-1.5.0/src/slice/mod.rs:17:5: usage of wildcard import
rayon-1.5.0/src/slice/mod.rs:25:1: item name ends with its containing module's name
rayon-1.5.0/src/slice/mod.rs:657:5: this method could have a `#[must_use]` attribute
rayon-1.5.0/src/slice/mod.rs:971:5: this method could have a `#[must_use]` attribute
rayon-1.5.0/src/slice/quicksort.rs:230:36: you should put `BlockQuicksort` between ticks in the documentation
rayon-1.5.0/src/slice/quicksort.rs:233:1: this function has too many lines (117/100)
rayon-1.5.0/src/slice/quicksort.rs:258:26: integer type suffix should be separated by an underscore
rayon-1.5.0/src/slice/quicksort.rs:265:26: integer type suffix should be separated by an underscore
rayon-1.5.0/src/slice/quicksort.rs:268:5: adding items after statements is confusing, since items exist from the start of the scope
rayon-1.5.0/src/slice/quicksort.rs:308:30: casting `usize` to `u8` may truncate the value
rayon-1.5.0/src/slice/quicksort.rs:325:30: casting `usize` to `u8` may truncate the value
rayon-1.5.0/src/slice/quicksort.rs:393:36: casting `u8` to `isize` may wrap around the value on targets with 32-bit wide pointers
rayon-1.5.0/src/slice/quicksort.rs:405:40: casting `u8` to `isize` may wrap around the value on targets with 32-bit wide pointers
rayon-1.5.0/src/slice/quicksort.rs:430:14: `pivot` is being shadowed
rayon-1.5.0/src/slice/quicksort.rs:439:13: `pivot` is being shadowed
rayon-1.5.0/src/slice/quicksort.rs:482:10: `pivot` is being shadowed
rayon-1.5.0/src/slice/quicksort.rs:491:9: `pivot` is being shadowed
rayon-1.5.0/src/slice/quicksort.rs:534:26: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
rayon-1.5.0/src/slice/quicksort.rs:545:17: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
rayon-1.5.0/src/slice/quicksort.rs:588:17: the operation is ineffective. Consider reducing it to `len / 4`
rayon-1.5.0/src/slice/quicksort.rs:716:14: `pivot` is being shadowed
rayon-1.5.0/src/split_producer.rs:56:16: use Option::map_or_else instead of an if let/else
rayon-1.5.0/src/split_producer.rs:92:9: use Option::map_or instead of an if let/else
rayon-1.5.0/src/str.rs:16:5: usage of wildcard import
rayon-1.5.0/src/str.rs:17:5: usage of wildcard import
rayon-1.5.0/src/str.rs:18:5: usage of wildcard import
rayon-1.5.0/src/str.rs:25:5: casting `u8` to `i8` may wrap around the value
rayon-1.5.0/src/str.rs:715:9: stripping a suffix manually
rayon-1.5.0/src/string.rs:5:5: usage of wildcard import
rayon-1.5.0/src/vec.rs:137:12: length comparison to zero
rayon-1.5.0/src/vec.rs:8:5: usage of wildcard import
rayon-1.5.0/src/vec.rs:9:5: usage of wildcard import
regex-1.3.2/src/backtrack.rs:100:13: redundant field names in struct initialization
regex-1.3.2/src/backtrack.rs:133:17: it looks like the same item is being pushed into this Vec
regex-1.3.2/src/backtrack.rs:145:20: unnecessary boolean `not` operation
regex-1.3.2/src/backtrack.rs:199:13: usage of wildcard import for enum variants
regex-1.3.2/src/backtrack.rs:223:29: redundant field names in struct initialization
regex-1.3.2/src/backtrack.rs:230:66: redundant field names in struct initialization
regex-1.3.2/src/backtrack.rs:284:21: casting `u32` to `u64` may become silently lossy if you later change the type
regex-1.3.2/src/backtrack.rs:287:5: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/backtrack.rs:97:13: redundant field names in struct initialization
regex-1.3.2/src/backtrack.rs:98:13: redundant field names in struct initialization
regex-1.3.2/src/backtrack.rs:99:13: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:1005:32: long literal lacking separators
regex-1.3.2/src/compile.rs:1006:21: long literal lacking separators
regex-1.3.2/src/compile.rs:1008:18: casting `u8` to `u64` may become silently lossy if you later change the type
regex-1.3.2/src/compile.rs:1009:18: casting `u8` to `u64` may become silently lossy if you later change the type
regex-1.3.2/src/compile.rs:1010:9: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
regex-1.3.2/src/compile.rs:102:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:1037:37: casting `u16` to `u8` may truncate the value
regex-1.3.2/src/compile.rs:1037:55: casting `u16` to `u8` may truncate the value
regex-1.3.2/src/compile.rs:1040:28: casting `u16` to `u8` may truncate the value
regex-1.3.2/src/compile.rs:1040:38: casting `u16` to `u8` may truncate the value
regex-1.3.2/src/compile.rs:1051:25: integer type suffix should be separated by an underscore
regex-1.3.2/src/compile.rs:1071:8: casting `u32` to `u64` may become silently lossy if you later change the type
regex-1.3.2/src/compile.rs:112:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/compile.rs:154:30: redundant closure found
regex-1.3.2/src/compile.rs:156:30: redundant closure found
regex-1.3.2/src/compile.rs:185:5: this function's return value is unnecessarily wrapped by `Result`
regex-1.3.2/src/compile.rs:187:40: redundant closure found
regex-1.3.2/src/compile.rs:201:53: you should put `MaybeInsts` between ticks in the documentation
regex-1.3.2/src/compile.rs:241:63: you should put `c_concat` between ticks in the documentation
regex-1.3.2/src/compile.rs:245:5: this function has too many lines (111/100)
regex-1.3.2/src/compile.rs:247:13: usage of wildcard import for enum variants
regex-1.3.2/src/compile.rs:373:24: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:373:36: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:378:12: unnecessary boolean `not` operation
regex-1.3.2/src/compile.rs:400:37: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:407:51: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:409:24: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:417:5: this function's return value is unnecessarily wrapped by `Result`
regex-1.3.2/src/compile.rs:42:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:42:5: you should consider adding a `Default` implementation for `compile::Compiler`
regex-1.3.2/src/compile.rs:444:5: this function's return value is unnecessarily wrapped by `Result`
regex-1.3.2/src/compile.rs:445:57: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:446:20: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:466:20: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:466:32: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:519:13: usage of wildcard import for enum variants
regex-1.3.2/src/compile.rs:55:57: you should put `size_limit` between ticks in the documentation
regex-1.3.2/src/compile.rs:58:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:748:41: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:74:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:751:54: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:765:41: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:765:55: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:825:39: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:825:51: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:828:49: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:828:61: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:830:59: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:830:71: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:832:43: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:835:41: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:835:53: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:835:67: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:83:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:896:5: this function's return value is unnecessarily wrapped by `Result`
regex-1.3.2/src/compile.rs:905:17: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:953:17: you should put `HashMap` between ticks in the documentation
regex-1.3.2/src/compile.rs:95:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/compile.rs:980:26: integer type suffix should be separated by an underscore
regex-1.3.2/src/compile.rs:994:44: redundant field names in struct initialization
regex-1.3.2/src/compile.rs:994:54: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:1007:17: binding's name is too similar to existing binding
regex-1.3.2/src/dfa.rs:1010:22: binding's name is too similar to existing binding
regex-1.3.2/src/dfa.rs:1059:13: usage of wildcard import for enum variants
regex-1.3.2/src/dfa.rs:1060:13: usage of wildcard import for enum variants
regex-1.3.2/src/dfa.rs:1084:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1087:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1090:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1093:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1096:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1101:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1104:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1107:38: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1117:30: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1120:47: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1121:30: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1129:13: you should put `is_match` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1134:13: you should put `is_match` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1185:68: you should put `is_match` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1193:13: usage of wildcard import for enum variants
regex-1.3.2/src/dfa.rs:1244:50: you should put `current_state` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1338:58: you should put `STATE_DEAD` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1339:9: you should put `STATE_UNKNOWN` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1366:25: you should put `STATE_DEAD` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1366:46: you should put `STATE_UNKNOWN` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1367:41: you have declared `#[inline(always)]` on `start_state`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:1380:14: the operation is ineffective. Consider reducing it to `(empty_flags.start as u8)`
regex-1.3.2/src/dfa.rs:1388:15: indexing into a vector may panic
regex-1.3.2/src/dfa.rs:1412:20: unused `self` argument
regex-1.3.2/src/dfa.rs:1438:9: unused `self` argument
regex-1.3.2/src/dfa.rs:1472:9: you should put `StatePtr` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1490:54: casting `i32` to `u8` may lose the sign of the value
regex-1.3.2/src/dfa.rs:1490:54: casting `i32` to `u8` may truncate the value
regex-1.3.2/src/dfa.rs:1521:20: you should put `num_byte_classes` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1529:41: you have declared `#[inline(always)]` on `byte_class`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:1537:14: you should put `byte_class` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1538:41: you have declared `#[inline(always)]` on `u8_class`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:1562:18: you should put `STATE_START` between ticks in the documentation
regex-1.3.2/src/dfa.rs:1614:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:1651:38: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:1700:17: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1701:18: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1705:19: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1708:16: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1709:18: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1713:19: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1716:18: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1717:18: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1721:19: digits of hex or binary literal not grouped by four
regex-1.3.2/src/dfa.rs:1727:14: casting `u8` to `u16` may become silently lossy if you later change the type
regex-1.3.2/src/dfa.rs:1732:15: this argument (2 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1736:22: this argument (2 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1741:9: match expression looks like `matches!` macro
regex-1.3.2/src/dfa.rs:1747:16: this argument (2 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/dfa.rs:1751:18: casting `u16` to `u8` may truncate the value
regex-1.3.2/src/dfa.rs:1815:38: casting `usize` to `u8` may truncate the value
regex-1.3.2/src/dfa.rs:1821:21: casting `u32` to `u64` may become silently lossy if you later change the type
regex-1.3.2/src/dfa.rs:1824:5: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:1848:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/dfa.rs:1850:18: casting `i32` to `u32` may lose the sign of the value
regex-1.3.2/src/dfa.rs:1857:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/dfa.rs:1860:17: casting `u32` to `i32` may wrap around the value
regex-1.3.2/src/dfa.rs:1867:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/dfa.rs:1870:19: casting `u32` to `u8` may truncate the value
regex-1.3.2/src/dfa.rs:1873:15: casting `u32` to `u8` may truncate the value
regex-1.3.2/src/dfa.rs:1876:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/dfa.rs:1882:26: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/dfa.rs:1884:15: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/dfa.rs:277:17: casting `u32` to `i32` may wrap around the value
regex-1.3.2/src/dfa.rs:277:31: casting `u32` to `i32` may wrap around the value
regex-1.3.2/src/dfa.rs:295:20: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/dfa.rs:295:20: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
regex-1.3.2/src/dfa.rs:299:21: casting `i32` to `usize` may lose the sign of the value
regex-1.3.2/src/dfa.rs:34:46: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/dfa.rs:398:1: more than 3 bools in a struct
regex-1.3.2/src/dfa.rs:446:41: you have declared `#[inline(always)]` on `forward`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:457:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:459:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:460:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:476:41: you have declared `#[inline(always)]` on `reverse`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:487:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:489:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:490:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:506:41: you have declared `#[inline(always)]` on `forward_many`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:518:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:520:13: redundant field names in struct initialization
regex-1.3.2/src/dfa.rs:554:41: you have declared `#[inline(always)]` on `exec_at`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:555:5: this function has too many lines (101/100)
regex-1.3.2/src/dfa.rs:58:9: usage of wildcard import for enum variants
regex-1.3.2/src/dfa.rs:667:21: binding's name is too similar to existing binding
regex-1.3.2/src/dfa.rs:747:41: you have declared `#[inline(always)]` on `exec_at_reverse`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:795:21: binding's name is too similar to existing binding
regex-1.3.2/src/dfa.rs:848:9: you should put `next_si` between ticks in the documentation
regex-1.3.2/src/dfa.rs:852:41: you have declared `#[inline(always)]` on `next_si`. This is usually a bad idea
regex-1.3.2/src/dfa.rs:885:12: you should put `STATE_DEAD` between ticks in the documentation
regex-1.3.2/src/dfa.rs:889:9: you should put `STATE_UNKNOWN` between ticks in the documentation
regex-1.3.2/src/dfa.rs:897:13: usage of wildcard import for enum variants
regex-1.3.2/src/dfa.rs:979:29: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
regex-1.3.2/src/error.rs:6:1: this seems like a manual implementation of the non-exhaustive pattern
regex-1.3.2/src/exec.rs:1000:14: you should put `captures_nfa` between ticks in the documentation
regex-1.3.2/src/exec.rs:100:1: item name starts with its containing module's name
regex-1.3.2/src/exec.rs:1028:5: this function has too many arguments (9/7)
regex-1.3.2/src/exec.rs:1039:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:1144:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:1179:26: this `match` has identical arm bodies
regex-1.3.2/src/exec.rs:122:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:1250:41: you have declared `#[inline(always)]` on `searcher`. This is usually a bad idea
regex-1.3.2/src/exec.rs:1260:41: you have declared `#[inline(always)]` on `searcher_str`. This is usually a bad idea
regex-1.3.2/src/exec.rs:1270:17: you should put `RegexSet` between ticks in the documentation
regex-1.3.2/src/exec.rs:1280:17: you should put `RegexSet` between ticks in the documentation
regex-1.3.2/src/exec.rs:137:9: field assignment outside of initializer for an instance created with Default::default()
regex-1.3.2/src/exec.rs:142:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:158:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:168:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:181:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:195:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:204:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:210:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/exec.rs:245:62: this `if` has identical blocks
regex-1.3.2/src/exec.rs:251:21: unnecessary boolean `not` operation
regex-1.3.2/src/exec.rs:262:60: this `if` has identical blocks
regex-1.3.2/src/exec.rs:268:21: unnecessary boolean `not` operation
regex-1.3.2/src/exec.rs:278:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:281:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:286:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/exec.rs:300:30: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:308:17: binding's name is too similar to existing binding
regex-1.3.2/src/exec.rs:329:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:330:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:331:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:334:13: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:340:19: redundant field names in struct initialization
regex-1.3.2/src/exec.rs:344:27: unused `self` argument
regex-1.3.2/src/exec.rs:383:41: you have declared `#[inline(always)]` on `shortest_match_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:388:41: you have declared `#[inline(always)]` on `is_match_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:393:41: you have declared `#[inline(always)]` on `find_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:398:41: you have declared `#[inline(always)]` on `captures_read_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:425:41: you have declared `#[inline(always)]` on `shortest_match_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:44:1: item name starts with its containing module's name
regex-1.3.2/src/exec.rs:473:9: you should put `shortest_match(...).is_some` between ticks in the documentation
regex-1.3.2/src/exec.rs:474:41: you have declared `#[inline(always)]` on `is_match_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:524:41: you have declared `#[inline(always)]` on `find_at`. This is usually a bad idea
regex-1.3.2/src/exec.rs:52:1: item name starts with its containing module's name
regex-1.3.2/src/exec.rs:686:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:727:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:767:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:783:41: you have declared `#[inline(always)]` on `shortest_dfa`. This is usually a bad idea
regex-1.3.2/src/exec.rs:791:41: you have declared `#[inline(always)]` on `shortest_dfa_reverse_suffix`. This is usually a bad idea
regex-1.3.2/src/exec.rs:823:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:868:13: usage of wildcard import for enum variants
regex-1.3.2/src/exec.rs:897:31: you should put `shortest_nfa(...).is_some` between ticks in the documentation
regex-1.3.2/src/exec.rs:899:9: you should put `shortest_nfa` between ticks in the documentation
regex-1.3.2/src/exec.rs:905:14: you should put `match_nfa` between ticks in the documentation
regex-1.3.2/src/exec.rs:930:14: you should put `shortest_nfa` between ticks in the documentation
regex-1.3.2/src/exec.rs:981:14: you should put `find_nfa` between ticks in the documentation
regex-1.3.2/src/expand.rs:170:27: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
regex-1.3.2/src/expand.rs:171:5: match expression looks like `matches!` macro
regex-1.3.2/src/expand.rs:22:13: calling `push_str()` using a single-character string literal
regex-1.3.2/src/expand.rs:27:23: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
regex-1.3.2/src/expand.rs:30:17: calling `push_str()` using a single-character string literal
regex-1.3.2/src/expand.rs:38:30: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
regex-1.3.2/src/expand.rs:42:21: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
regex-1.3.2/src/expand.rs:50:1: item name starts with its containing module's name
regex-1.3.2/src/expand.rs:69:23: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
regex-1.3.2/src/expand.rs:80:28: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
regex-1.3.2/src/expand.rs:84:21: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
regex-1.3.2/src/expand.rs:8:1: item name starts with its containing module's name
regex-1.3.2/src/input.rs:142:1: item name ends with its containing module's name
regex-1.3.2/src/input.rs:146:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:15:1: item name starts with its containing module's name
regex-1.3.2/src/input.rs:165:31: redundant field names in struct initialization
regex-1.3.2/src/input.rs:178:13: usage of wildcard import for enum variants
regex-1.3.2/src/input.rs:228:1: item name ends with its containing module's name
regex-1.3.2/src/input.rs:236:21: redundant field names in struct initialization
regex-1.3.2/src/input.rs:236:33: redundant field names in struct initialization
regex-1.3.2/src/input.rs:24:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:271:13: usage of wildcard import for enum variants
regex-1.3.2/src/input.rs:29:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:362:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:370:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:371:42: redundant closure found
regex-1.3.2/src/input.rs:37:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:388:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:42:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:47:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:53:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:58:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/input.rs:63:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:101:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:114:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:127:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:139:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:144:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:149:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:154:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:155:13: usage of wildcard import for enum variants
regex-1.3.2/src/literal/imp.rs:160:30: this `match` has identical arm bodies
regex-1.3.2/src/literal/imp.rs:167:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:168:13: usage of wildcard import for enum variants
regex-1.3.2/src/literal/imp.rs:211:20: redundant else block
regex-1.3.2/src/literal/imp.rs:276:50: this `match` has identical arm bodies
regex-1.3.2/src/literal/imp.rs:342:41: you have declared `#[inline(always)]` on `find`. This is usually a bad idea
regex-1.3.2/src/literal/imp.rs:435:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:436:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:437:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:438:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:439:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:440:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:455:41: you have declared `#[inline(always)]` on `find`. This is usually a bad idea
regex-1.3.2/src/literal/imp.rs:46:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:481:41: you have declared `#[inline(always)]` on `is_suffix`. This is usually a bad idea
regex-1.3.2/src/literal/imp.rs:51:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:579:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:57:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:580:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:583:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:602:9: adding items after statements is confusing, since items exist from the start of the scope
regex-1.3.2/src/literal/imp.rs:622:24: redundant else block
regex-1.3.2/src/literal/imp.rs:62:18: this argument is passed by value, but not consumed in the function body
regex-1.3.2/src/literal/imp.rs:637:24: redundant else block
regex-1.3.2/src/literal/imp.rs:648:9: unneeded `return` statement
regex-1.3.2/src/literal/imp.rs:651:44: you should put `BoyerMooreSearch` between ticks in the documentation
regex-1.3.2/src/literal/imp.rs:65:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:68:13: redundant field names in struct initialization
regex-1.3.2/src/literal/imp.rs:783:32: redundant else block
regex-1.3.2/src/literal/imp.rs:786:42: manual saturating arithmetic
regex-1.3.2/src/literal/imp.rs:78:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:84:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/literal/imp.rs:850:20: long literal lacking separators
regex-1.3.2/src/literal/imp.rs:85:13: usage of wildcard import for enum variants
regex-1.3.2/src/pikevm.rs:103:15: redundant field names in struct initialization
regex-1.3.2/src/pikevm.rs:103:52: redundant field names in struct initialization
regex-1.3.2/src/pikevm.rs:114:5: this function has too many arguments (8/7)
regex-1.3.2/src/pikevm.rs:117:13: binding's name is too similar to existing binding
regex-1.3.2/src/pikevm.rs:124:17: binding's name is too similar to existing binding
regex-1.3.2/src/pikevm.rs:220:9: you should put `thread_caps` between ticks in the documentation
regex-1.3.2/src/pikevm.rs:222:16: you should put `at_next` between ticks in the documentation
regex-1.3.2/src/pikevm.rs:223:9: you should put `at_next` between ticks in the documentation
regex-1.3.2/src/pikevm.rs:224:5: this function has too many arguments (8/7)
regex-1.3.2/src/pikevm.rs:234:13: usage of wildcard import for enum variants
regex-1.3.2/src/pikevm.rs:303:13: usage of wildcard import for enum variants
regex-1.3.2/src/pikevm.rs:331:29: this expression mutably borrows a mutable reference. Consider reborrowing
regex-1.3.2/src/pikevm.rs:88:5: this function has too many arguments (8/7)
regex-1.3.2/src/prog.rs:102:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:113:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:120:9: match expression looks like `matches!` macro
regex-1.3.2/src/prog.rs:128:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:134:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:141:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:147:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:164:41: you have declared `#[inline(always)]` on `deref`. This is usually a bad idea
regex-1.3.2/src/prog.rs:172:13: usage of wildcard import for enum variants
regex-1.3.2/src/prog.rs:18:1: more than 3 bools in a struct
regex-1.3.2/src/prog.rs:236:13: using `write!()` with a format string that ends in a single newline
regex-1.3.2/src/prog.rs:300:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:301:9: match expression looks like `matches!` macro
regex-1.3.2/src/prog.rs:382:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:409:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:80:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/prog.rs:80:5: you should consider adding a `Default` implementation for `prog::Program`
regex-1.3.2/src/re_builder.rs:267:17: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_builder.rs:267:17: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_builder.rs:4:1: more than 3 bools in a struct
regex-1.3.2/src/re_builder.rs:57:17: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_builder.rs:57:17: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_builder.rs:68:17: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_builder.rs:68:17: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_bytes.rs:1017:9: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
regex-1.3.2/src/re_bytes.rs:1039:9: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
regex-1.3.2/src/re_bytes.rs:1093:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
regex-1.3.2/src/re_bytes.rs:1118:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
regex-1.3.2/src/re_bytes.rs:1133:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
regex-1.3.2/src/re_bytes.rs:118:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_bytes.rs:256:13: redundant field names in struct initialization
regex-1.3.2/src/re_bytes.rs:29:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:35:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:42:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:48:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:558:29: you should put `shortest_match` between ticks in the documentation
regex-1.3.2/src/re_bytes.rs:55:33: redundant field names in struct initialization
regex-1.3.2/src/re_bytes.rs:55:47: redundant field names in struct initialization
regex-1.3.2/src/re_bytes.rs:572:29: you should put `is_match` between ticks in the documentation
regex-1.3.2/src/re_bytes.rs:720:13: redundant field names in struct initialization
regex-1.3.2/src/re_bytes.rs:817:5: you should put `CaptureLocations` between ticks in the documentation
regex-1.3.2/src/re_bytes.rs:843:1: item `re_bytes::CaptureLocations` has a public `len` method but no corresponding `is_empty` method
regex-1.3.2/src/re_bytes.rs:849:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:858:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:869:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:891:1: item `re_bytes::Captures<'t>` has a public `len` method but no corresponding `is_empty` method
regex-1.3.2/src/re_bytes.rs:911:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:917:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:926:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_bytes.rs:955:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:179:13: redundant field names in struct initialization
regex-1.3.2/src/re_set.rs:179:13: redundant field names in struct initialization
regex-1.3.2/src/re_set.rs:251:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:251:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:263:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:263:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:268:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:268:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:277:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:277:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_set.rs:94:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_set.rs:94:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_trait.rs:136:29: redundant field names in struct initialization
regex-1.3.2/src/re_unicode.rs:1019:9: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
regex-1.3.2/src/re_unicode.rs:1041:9: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead
regex-1.3.2/src/re_unicode.rs:1088:13: redundant field names in struct initialization
regex-1.3.2/src/re_unicode.rs:1135:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
regex-1.3.2/src/re_unicode.rs:1160:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
regex-1.3.2/src/re_unicode.rs:174:5: docs for function returning `Result` missing `# Errors` section
regex-1.3.2/src/re_unicode.rs:21:1: this function could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:313:13: redundant field names in struct initialization
regex-1.3.2/src/re_unicode.rs:38:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:44:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:51:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:57:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:617:29: you should put `shortest_match` between ticks in the documentation
regex-1.3.2/src/re_unicode.rs:631:29: you should put `is_match` between ticks in the documentation
regex-1.3.2/src/re_unicode.rs:64:33: redundant field names in struct initialization
regex-1.3.2/src/re_unicode.rs:64:47: redundant field names in struct initialization
regex-1.3.2/src/re_unicode.rs:834:5: you should put `CaptureLocations` between ticks in the documentation
regex-1.3.2/src/re_unicode.rs:860:1: item `re_unicode::CaptureLocations` has a public `len` method but no corresponding `is_empty` method
regex-1.3.2/src/re_unicode.rs:866:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:875:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:886:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:908:1: item `re_unicode::Captures<'t>` has a public `len` method but no corresponding `is_empty` method
regex-1.3.2/src/re_unicode.rs:928:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:934:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:943:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/re_unicode.rs:972:5: this method could have a `#[must_use]` attribute
regex-1.3.2/src/sparse.rs:10:37: you should put bare URLs between `<`/`>` or make a proper Markdown link
regex-1.3.2/src/sparse.rs:15:1: item name starts with its containing module's name
regex-1.3.2/src/utf8.rs:100:16: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:103:16: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:106:22: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:107:19: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:108:19: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:109:19: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:111:27: long literal lacking separators
regex-1.3.2/src/utf8.rs:121:1: item name ends with its containing module's name
regex-1.3.2/src/utf8.rs:143:24: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:143:9: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:23:1: item name ends with its containing module's name
regex-1.3.2/src/utf8.rs:30:20: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:51:1: item name ends with its containing module's name
regex-1.3.2/src/utf8.rs:58:23: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:58:9: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:63:16: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:66:22: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:66:54: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:77:16: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:80:16: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:83:22: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:84:19: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:85:19: casting `u8` to `u32` may become silently lossy if you later change the type
regex-1.3.2/src/utf8.rs:92:23: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:92:9: digits of hex or binary literal not grouped by four
regex-1.3.2/src/utf8.rs:97:16: digits of hex or binary literal not grouped by four
ripgrep-12.1.1/build.rs:133:19: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `githash.as_deref()` instead
ripgrep-12.1.1/build.rs:18:18: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
ripgrep-12.1.1/build.rs:225:14: redundant closure found
ripgrep-12.1.1/build.rs:92:19: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `githash.as_deref()` instead
ripgrep-12.1.1/crates/core/app.rs:1408:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1408:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1409:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1409:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:152:32: you should put `clap::Arg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:152:32: you should put `clap::Arg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:156:39: you should put `clap::Arg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:156:39: you should put `clap::Arg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:156:5: you should put `RGArg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:156:5: you should put `RGArg` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:1668:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1668:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1669:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1669:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1821:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1821:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1822:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:1822:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:2999:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:2999:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:3000:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:3000:5: adding items after statements is confusing, since items exist from the start of the scope
ripgrep-12.1.1/crates/core/app.rs:367:54: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:367:54: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:414:59: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:414:59: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:417:57: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:417:57: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:417:57: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:417:57: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:444:41: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:444:41: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:470:41: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:470:41: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/app.rs:75:9: you should put `RIPGREP_BUILD_GIT_HASH` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:75:9: you should put `RIPGREP_BUILD_GIT_HASH` between ticks in the documentation
ripgrep-12.1.1/crates/core/app.rs:87:5: unnecessary boolean `not` operation
ripgrep-12.1.1/crates/core/app.rs:87:5: unnecessary boolean `not` operation
ripgrep-12.1.1/crates/core/args.rs:1143:22: unused `self` argument
ripgrep-12.1.1/crates/core/args.rs:11:1: this import is redundant
ripgrep-12.1.1/crates/core/args.rs:1209:74: this `if` has identical blocks
ripgrep-12.1.1/crates/core/args.rs:1209:74: this `if` has identical blocks
ripgrep-12.1.1/crates/core/args.rs:1282:13: binding's name is too similar to existing binding
ripgrep-12.1.1/crates/core/args.rs:1430:22: unused `self` argument
ripgrep-12.1.1/crates/core/args.rs:1438:21: you should put `OsStr` between ticks in the documentation
ripgrep-12.1.1/crates/core/args.rs:1520:44: redundant closure found
ripgrep-12.1.1/crates/core/args.rs:1524:5: this function's return value is unnecessarily wrapped by `Result`
ripgrep-12.1.1/crates/core/args.rs:1635:14: you should put `values_of_lossy` between ticks in the documentation
ripgrep-12.1.1/crates/core/args.rs:1693:41: redundant closure found
ripgrep-12.1.1/crates/core/args.rs:1770:17: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
ripgrep-12.1.1/crates/core/args.rs:287:13: binding's name is too similar to existing binding
ripgrep-12.1.1/crates/core/args.rs:33:1: this import is redundant
ripgrep-12.1.1/crates/core/args.rs:34:1: this import is redundant
ripgrep-12.1.1/crates/core/args.rs:35:1: this import is redundant
ripgrep-12.1.1/crates/core/args.rs:410:14: this argument (2 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
ripgrep-12.1.1/crates/core/args.rs:475:18: this `match` has identical arm bodies
ripgrep-12.1.1/crates/core/args.rs:512:19: you should put `ArgMatches` between ticks in the documentation
ripgrep-12.1.1/crates/core/args.rs:549:16: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name
ripgrep-12.1.1/crates/core/args.rs:76:18: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
ripgrep-12.1.1/crates/core/args.rs:77:13: usage of wildcard import for enum variants
ripgrep-12.1.1/crates/core/args.rs:923:42: you should put `BinaryDetection::quit` between ticks in the documentation
ripgrep-12.1.1/crates/core/config.rs:13:1: this import is redundant
ripgrep-12.1.1/crates/core/config.rs:58:6: very complex type used. Consider factoring parts into `type` definitions
ripgrep-12.1.1/crates/core/config.rs:79:6: very complex type used. Consider factoring parts into `type` definitions
ripgrep-12.1.1/crates/core/logger.rs:11:30: you should put `max_level` between ticks in the documentation
ripgrep-12.1.1/crates/core/logger.rs:15:16: constants have by default a `'static` lifetime
ripgrep-12.1.1/crates/core/main.rs:55:19: this argument is passed by value, but not consumed in the function body
ripgrep-12.1.1/crates/core/main.rs:56:9: usage of wildcard import for enum variants
ripgrep-12.1.1/crates/core/messages.rs:46:1: item name ends with its containing module's name
ripgrep-12.1.1/crates/core/messages.rs:51:1: item name ends with its containing module's name
ripgrep-12.1.1/crates/core/messages.rs:62:1: item name ends with its containing module's name
ripgrep-12.1.1/crates/core/path_printer.rs:27:1: item name starts with its containing module's name
ripgrep-12.1.1/crates/core/path_printer.rs:89:9: unnecessary boolean `not` operation
ripgrep-12.1.1/crates/core/search.rs:185:1: item name starts with its containing module's name
ripgrep-12.1.1/crates/core/search.rs:292:9: using `write!()` with a format string that ends in a single newline
ripgrep-12.1.1/crates/core/search.rs:311:1: item name starts with its containing module's name
ripgrep-12.1.1/crates/core/search.rs:377:12: this boolean expression can be simplified
ripgrep-12.1.1/crates/core/search.rs:423:13: usage of wildcard import for enum variants
ripgrep-12.1.1/crates/core/search.rs:447:13: usage of wildcard import for enum variants
ripgrep-12.1.1/crates/core/search.rs:472:24: you are using an explicit closure for cloning elements
ripgrep-12.1.1/crates/core/search.rs:472:41: redundant closure found
ripgrep-12.1.1/crates/core/search.rs:480:24: you are using an explicit closure for cloning elements
ripgrep-12.1.1/crates/core/search.rs:480:41: redundant closure found
ripgrep-12.1.1/crates/core/search.rs:49:1: item name starts with its containing module's name
ripgrep-12.1.1/crates/core/search.rs:509:24: you are using an explicit closure for cloning elements
ripgrep-12.1.1/crates/core/search.rs:509:41: redundant closure found
ripgrep-12.1.1/crates/core/search.rs:517:24: you are using an explicit closure for cloning elements
ripgrep-12.1.1/crates/core/search.rs:517:41: redundant closure found
ripgrep-12.1.1/crates/core/search.rs:533:36: casting `u32` to `f64` may become silently lossy if you later change the type
ripgrep-12.1.1/crates/core/search.rs:533:5: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
ripgrep-12.1.1/crates/core/subject.rs:20:1: item name starts with its containing module's name
ripgrep-12.1.1/crates/core/subject.rs:4:1: this import is redundant
syn-1.0.54/src/lit.rs:1397:40: redundant else block
syn-1.0.54/src/lit.rs:1405:28: redundant else block
syn-1.0.54/src/lit.rs:1485:32: redundant else block
unicode-xid-0.2.1/src/lib.rs:57:64: you should put `XID_Start` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:60:10: you should put `XID_Start` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:62:27: you should put `ID_Start` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:62:67: you should put `NFKx` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:63:21: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name
unicode-xid-0.2.1/src/lib.rs:65:61: you should put `XID_Continue` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:68:10: you should put `XID_Continue` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:70:28: you should put `ID_Continue` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:70:72: you should put `NFKx` between ticks in the documentation
unicode-xid-0.2.1/src/lib.rs:71:24: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name
xsv-0.13.0/src/cmd/cat.rs:101:34: redundant closure found
xsv-0.13.0/src/cmd/cat.rs:42:1: more than 3 bools in a struct
xsv-0.13.0/src/cmd/cat.rs:53:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/cat.rs:7:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/count.rs:32:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/count.rs:38:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/count.rs:42:33: integer type suffix should be separated by an underscore
xsv-0.13.0/src/cmd/count.rs:50:5: passing a unit value to a function
xsv-0.13.0/src/cmd/count.rs:7:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/fixlengths.rs:45:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/fixlengths.rs:50:18: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/fixlengths.rs:62:30: integer type suffix should be separated by an underscore
xsv-0.13.0/src/cmd/fixlengths.rs:9:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/flatten.rs:10:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/flatten.rs:51:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/fmt.rs:50:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/fmt.rs:55:13: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/fmt.rs:7:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/frequency.rs:148:43: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/frequency.rs:149:43: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/frequency.rs:15:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/frequency.rs:169:13: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/frequency.rs:176:17: unnecessary boolean `not` operation
xsv-0.13.0/src/cmd/frequency.rs:178:24: this `else { if .. }` block can be collapsed
xsv-0.13.0/src/cmd/frequency.rs:77:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/frequency.rs:93:31: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/headers.rs:43:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/headers.rs:49:17: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/headers.rs:60:22: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/cmd/headers.rs:9:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/index.rs:11:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/index.rs:45:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/input.rs:42:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/input.rs:47:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/input.rs:7:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/join.rs:17:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/join.rs:194:29: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/join.rs:224:22: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/join.rs:281:44: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/cmd/join.rs:293:14: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/join.rs:293:20: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/join.rs:297:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/join.rs:298:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/join.rs:299:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/join.rs:300:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/join.rs:308:9: unused `self` argument
xsv-0.13.0/src/cmd/join.rs:342:38: integer type suffix should be separated by an underscore
xsv-0.13.0/src/cmd/join.rs:342:46: integer type suffix should be separated by an underscore
xsv-0.13.0/src/cmd/join.rs:347:9: unnecessary boolean `not` operation
xsv-0.13.0/src/cmd/join.rs:372:44: redundant closure found
xsv-0.13.0/src/cmd/join.rs:375:33: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/join.rs:392:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/join.rs:403:29: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/join.rs:426:13: unnecessary boolean `not` operation
xsv-0.13.0/src/cmd/join.rs:77:1: more than 3 bools in a struct
xsv-0.13.0/src/cmd/join.rs:94:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/partition.rs:105:22: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/partition.rs:126:36: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/cmd/partition.rs:139:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/partition.rs:15:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/partition.rs:169:9: unnecessary boolean `not` operation
xsv-0.13.0/src/cmd/partition.rs:56:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/partition.rs:77:9: unused `self` argument
xsv-0.13.0/src/cmd/sample.rs:105:44: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/sample.rs:115:21: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/sample.rs:11:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/sample.rs:51:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/sample.rs:58:19: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/sample.rs:69:9: wildcard match will miss any future added variants
xsv-0.13.0/src/cmd/sample.rs:75:16: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/sample.rs:91:42: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/sample.rs:92:43: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/search.rs:51:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/search.rs:9:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/select.rs:60:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/select.rs:8:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/slice.rs:57:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/slice.rs:9:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/sort.rs:11:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/sort.rs:138:47: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/sort.rs:139:51: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/sort.rs:48:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/sort.rs:91:14: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/split.rs:131:36: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/cmd/split.rs:14:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/split.rs:61:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/split.rs:94:5: this function's return value is unnecessarily wrapped by `Result`
xsv-0.13.0/src/cmd/split.rs:96:14: this argument is passed by value, but not consumed in the function body
xsv-0.13.0/src/cmd/split.rs:99:13: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/stats.rs:110:36: redundant closure found
xsv-0.13.0/src/cmd/stats.rs:127:14: this argument is passed by value, but not consumed in the function body
xsv-0.13.0/src/cmd/stats.rs:138:43: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/stats.rs:139:43: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
xsv-0.13.0/src/cmd/stats.rs:162:25: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/cmd/stats.rs:22:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/stats.rs:231:1: more than 3 bools in a struct
xsv-0.13.0/src/cmd/stats.rs:262:35: calling `cmd::stats::TypedSum::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:263:40: calling `cmd::stats::TypedMinMax::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:264:39: calling `stats::OnlineStats::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:265:58: calling `stats::Unsorted::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:266:41: calling `stats::Unsorted::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:268:18: calling `cmd::stats::FieldType::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:269:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:270:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:271:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:272:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:273:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:274:13: redundant field names in struct initialization
xsv-0.13.0/src/cmd/stats.rs:283:9: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:284:9: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:285:9: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:290:21: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:293:25: this `match` has identical arm bodies
xsv-0.13.0/src/cmd/stats.rs:297:25: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:301:21: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:302:21: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`
xsv-0.13.0/src/cmd/stats.rs:308:18: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name
xsv-0.13.0/src/cmd/stats.rs:318:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/stats.rs:322:45: redundant closure found
xsv-0.13.0/src/cmd/stats.rs:322:9: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/stats.rs:327:9: unnecessary boolean `not` operation
xsv-0.13.0/src/cmd/stats.rs:330:13: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
xsv-0.13.0/src/cmd/stats.rs:338:45: redundant closure found
xsv-0.13.0/src/cmd/stats.rs:402:16: redundant pattern matching, consider using `is_ok()`
xsv-0.13.0/src/cmd/stats.rs:403:16: redundant pattern matching, consider using `is_ok()`
xsv-0.13.0/src/cmd/stats.rs:407:18: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
xsv-0.13.0/src/cmd/stats.rs:411:16: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
xsv-0.13.0/src/cmd/stats.rs:427:56: this `match` has identical arm bodies
xsv-0.13.0/src/cmd/stats.rs:429:56: this `match` has identical arm bodies
xsv-0.13.0/src/cmd/stats.rs:430:60: this `match` has identical arm bodies
xsv-0.13.0/src/cmd/stats.rs:430:60: this `match` has identical arm bodies
xsv-0.13.0/src/cmd/stats.rs:454:5: you should put `TypedSum` between ticks in the documentation
xsv-0.13.0/src/cmd/stats.rs:473:43: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/stats.rs:504:56: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/stats.rs:505:51: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/stats.rs:511:5: you should put `TypedMinMax` between ticks in the documentation
xsv-0.13.0/src/cmd/stats.rs:536:35: casting `f64` to `i64` may truncate the value
xsv-0.13.0/src/cmd/stats.rs:544:33: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
xsv-0.13.0/src/cmd/stats.rs:592:22: calling `stats::MinMax::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:593:22: calling `stats::MinMax::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:594:23: calling `stats::MinMax::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:595:21: calling `stats::MinMax::default()` is more clear than this expression
xsv-0.13.0/src/cmd/stats.rs:71:1: more than 3 bools in a struct
xsv-0.13.0/src/cmd/stats.rs:86:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/table.rs:10:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/cmd/table.rs:50:9: binding's name is too similar to existing binding
xsv-0.13.0/src/cmd/table.rs:54:9: binding's name is too similar to existing binding
xsv-0.13.0/src/config.rs:113:43: use of `unwrap_or` followed by a function call
xsv-0.13.0/src/config.rs:197:48: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/config.rs:202:48: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/config.rs:263:47: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/config.rs:293:47: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/config.rs:58:1: more than 3 bools in a struct
xsv-0.13.0/src/config.rs:77:28: explicit deref method call
xsv-0.13.0/src/config.rs:90:13: redundant field names in struct initialization
xsv-0.13.0/src/index.rs:31:13: redundant field names in struct initialization
xsv-0.13.0/src/main.rs:164:49: redundant clone
xsv-0.13.0/src/main.rs:75:16: statics have by default a `'static` lifetime
xsv-0.13.0/src/select.rs:13:1: item name starts with its containing module's name
xsv-0.13.0/src/select.rs:154:5: this function's return value is unnecessarily wrapped by `Result`
xsv-0.13.0/src/select.rs:250:33: binding's name is too similar to existing binding
xsv-0.13.0/src/select.rs:250:43: binding's name is too similar to existing binding
xsv-0.13.0/src/select.rs:255:39: an inclusive range would be more readable
xsv-0.13.0/src/select.rs:280:20: length comparison to zero
xsv-0.13.0/src/select.rs:29:13: redundant field names in struct initialization
xsv-0.13.0/src/select.rs:360:62: this argument (8 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
xsv-0.13.0/src/select.rs:360:9: this function's return value is unnecessarily wrapped by `Option`
xsv-0.13.0/src/select.rs:375:9: used sort instead of sort_unstable to sort primitive type `usize`
xsv-0.13.0/src/select.rs:379:18: it is more concise to loop over containers instead of using explicit iteration methods
xsv-0.13.0/src/select.rs:416:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
xsv-0.13.0/src/select.rs:419:9: this function's return value is unnecessarily wrapped by `Option`
xsv-0.13.0/src/select.rs:420:27: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
xsv-0.13.0/src/select.rs:99:17: binding's name is too similar to existing binding
xsv-0.13.0/src/util.rs:150:5: you should put bare URLs between `<`/`>` or make a proper Markdown link
xsv-0.13.0/src/util.rs:190:48: trait objects without an explicit `dyn` are deprecated
xsv-0.13.0/src/util.rs:37:33: you are using an explicit closure for copying elements
xsv-0.13.0/src/util.rs:90:1: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)
