error: changes to closure capture in Rust 2021 will affect `Send` closure trait implementation
  --> $DIR/auto_traits.rs:13:19
   |
LL |       thread::spawn(move || unsafe {
   |  ___________________^
LL | |
LL | |
LL | |         *fptr.0 = 20;
   | |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`
LL | |     });
   | |_____^
   |
note: the lint level is defined here
  --> $DIR/auto_traits.rs:2:9
   |
LL | #![deny(rust_2021_incompatible_closure_captures)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |         *fptr.0 = 20;
LL |     } });
   |

error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` closure trait implementation
  --> $DIR/auto_traits.rs:30:19
   |
LL |       thread::spawn(move || unsafe {
   |  ___________________^
LL | |
LL | |
LL | |         *fptr.0.0 = 20;
   | |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`
LL | |     });
   | |_____^
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |         *fptr.0.0 = 20;
LL |     } });
   |

error: changes to closure capture in Rust 2021 will affect `Clone` closure trait implementation, and drop order
  --> $DIR/auto_traits.rs:51:13
   |
LL |       let c = || {
   |  _____________^
LL | |
LL | |
LL | |         let f_1 = f.1;
   | |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`
LL | |         println!("{:?}", f_1.0);
LL | |     };
   | |_____^
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `f` to be fully captured
   |
LL |     let c = || { let _ = &f; 
LL |
LL |
LL |         let f_1 = f.1;
LL |         println!("{:?}", f_1.0);
LL |     };
   |

error: aborting due to 3 previous errors

