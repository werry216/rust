[package]
name = "rustc_codegen_cranelift"
version = "0.1.0"
authors = ["bjorn3 <bjorn3@users.noreply.github.com>"]
edition = "2018"

[lib]
crate-type = ["dylib"]

[features]
default = ["backend_object"]
backend_object = ["object/write", "cranelift-object"]

[dependencies]
# These have to be in sync with each other
cranelift = { git = "https://github.com/bytecodealliance/cranelift/", default-features = false, features = ["std"] }
cranelift-module = { git = "https://github.com/bytecodealliance/cranelift/" }
cranelift-faerie = { git = "https://github.com/bytecodealliance/cranelift/" }
cranelift-object = { git = "https://github.com/bytecodealliance/cranelift/", optional = true }
target-lexicon = "0.9.0"
faerie = "0.12.0"

#goblin = "0.0.17"
ar = "0.8.0"
byteorder = "1.2.7"
libc = "0.2.53"
gimli = "0.19.0"
indexmap = "1.0.2"
libloading = "0.5.1"

[dependencies.object]
# FIXME remove git and rev once cranelift switches back to a crates.io release of object
git = "https://github.com/gimli-rs/object"
rev = "cba3ed4932e4c594c5eab4f5ef6c51838f4a5056"

version = "0.15.0"
default-features = false
features = ["compression", "read", "std"] # We don't need WASM support

# Uncomment to use local checkout of cranelift
#[patch."https://github.com/bytecodealliance/cranelift/"]
#cranelift = { path = "../cranelift/cranelift-umbrella", default-features = false, features = ["std"] }
#cranelift-module = { path = "../cranelift/cranelift-module" }
#cranelift-simplejit = { path = "../cranelift/cranelift-simplejit" }
#cranelift-faerie = { path = "../cranelift/cranelift-faerie" }
#cranelift-object = { path = "../cranelift/cranelift-object" }

#[patch.crates-io]
#gimli = { path = "../" }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
cranelift-simplejit = { git = "https://github.com/bytecodealliance/cranelift/" }

[profile.dev]
# By compiling dependencies with optimizations, performing tests gets much faster.
opt-level = 3

[profile.dev.package.rustc_codegen_cranelift]
# Disabling optimizations for cg_clif itself makes compilation after a change faster.
opt-level = 0

# Disable optimizations and debuginfo of build scripts and some of the heavy build deps, as the
# execution time of build scripts is so fast that optimizing them slows down the total build time.
[profile.dev.build-override]
opt-level = 0
debug = false

[profile.dev.package.cranelift-codegen-meta]
opt-level = 0
debug = false

[profile.dev.package.syn]
opt-level = 0
debug = false

[profile.dev.package.synstructure]
opt-level = 0
debug = false
