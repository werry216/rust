error[E0412]: cannot find type `Apple` in this scope
  --> $DIR/issue-35675.rs:20:29
   |
20 | fn should_return_fruit() -> Apple {
   |                             ^^^^^ not found in this scope
   |
help: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?
  --> $DIR/issue-35675.rs:14:5
   |
14 |     Apple(i64),
   |     ^^^^^^^^^^

error[E0425]: cannot find function `Apple` in this scope
  --> $DIR/issue-35675.rs:23:5
   |
23 |     Apple(5)
   |     ^^^^^ not found in this scope
   |
help: possible candidate is found in another module, you can import it into scope
   | use Fruit::Apple;

error[E0573]: expected type, found variant `Fruit::Apple`
  --> $DIR/issue-35675.rs:28:33
   |
28 | fn should_return_fruit_too() -> Fruit::Apple {
   |                                 ^^^^^^^^^^^^ not a type
   |
help: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?
  --> $DIR/issue-35675.rs:14:5
   |
14 |     Apple(i64),
   |     ^^^^^^^^^^

error[E0425]: cannot find function `Apple` in this scope
  --> $DIR/issue-35675.rs:31:5
   |
31 |     Apple(5)
   |     ^^^^^ not found in this scope
   |
help: possible candidate is found in another module, you can import it into scope
   | use Fruit::Apple;

error[E0573]: expected type, found variant `Ok`
  --> $DIR/issue-35675.rs:36:13
   |
36 | fn foo() -> Ok {
   |             ^^ not a type
   |
   = help: there is an enum variant `std::prelude::v1::Ok`, did you mean to use `std::prelude::v1`?
   = help: there is an enum variant `std::prelude::v1::Result::Ok`, did you mean to use `std::prelude::v1::Result`?

error[E0412]: cannot find type `Variant3` in this scope
  --> $DIR/issue-35675.rs:44:13
   |
44 | fn bar() -> Variant3 {
   |             ^^^^^^^^ not found in this scope
   |
help: there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?
  --> $DIR/issue-35675.rs:63:9
   |
63 |         Variant3(usize),
   |         ^^^^^^^^^^^^^^^

error[E0573]: expected type, found variant `Some`
  --> $DIR/issue-35675.rs:49:13
   |
49 | fn qux() -> Some {
   |             ^^^^ not a type
   |
   = help: there is an enum variant `std::option::Option::Some`, did you mean to use `std::option::Option`?
   = help: there is an enum variant `std::prelude::v1::Some`, did you mean to use `std::prelude::v1`?

error: aborting due to previous error(s)

