error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:3:35
   |
LL | fn elided(x: &i32) -> impl Copy { x }
   |              ----     ---------   ^ ...and is captured here
   |              |        |
   |              |        ...is required to be `'static` by this...
   |              this data with the anonymous lifetime `'_`...
   |
help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`
   |
LL | fn elided(x: &i32) -> impl Copy + '_ { x }
   |                                 ^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:6:44
   |
LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }
   |                    -------     ---------   ^ ...and is captured here
   |                    |           |
   |                    |           ...is required to be `'static` by this...
   |                    this data with lifetime `'a`...
   |
help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`
   |
LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }
   |                                          ^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:9:46
   |
LL | fn elided2(x: &i32) -> impl Copy + 'static { x }
   |               ----     -------------------   ^ ...and is captured here
   |               |        |
   |               |        ...is required to be `'static` by this...
   |               this data with the anonymous lifetime `'_`...
   |
help: consider changing the `impl Trait`'s explicit `'static` bound to the anonymous lifetime `'_`
   |
LL | fn elided2(x: &i32) -> impl Copy + '_ { x }
   |                                    ^^
help: alternatively, set an explicit `'static` lifetime to this parameter
   |
LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }
   |               ^^^^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:12:55
   |
LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }
   |                     -------     -------------------   ^ ...and is captured here
   |                     |           |
   |                     |           ...is required to be `'static` by this...
   |                     this data with lifetime `'a`...
   |
help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`
   |
LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }
   |                                             ^^
help: alternatively, set an explicit `'static` lifetime to this parameter
   |
LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }
   |                     ^^^^^^^^^^^^

error[E0621]: explicit lifetime required in the type of `x`
  --> $DIR/must_outlive_least_region_or_bound.rs:15:24
   |
LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }
   |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required
   |               |
   |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:33:69
   |
LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }
   |                      -------     --------------------------------   ^ ...and is captured here
   |                      |           |
   |                      |           ...is required to be `'static` by this...
   |                      this data with lifetime `'a`...
   |
help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`
   |
LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }
   |                                                           ^^
help: alternatively, set an explicit `'static` lifetime to this parameter
   |
LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }
   |                      ^^^^^^^^^^^^

error[E0623]: lifetime mismatch
  --> $DIR/must_outlive_least_region_or_bound.rs:38:61
   |
LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {
   |                                                 -------     ^^^^^^^^^^^^^^^^
   |                                                 |           |
   |                                                 |           ...but data from `y` is returned here
   |                                                 this parameter and the return type are declared with different lifetimes...

error[E0310]: the parameter type `T` may not live long enough
  --> $DIR/must_outlive_least_region_or_bound.rs:43:51
   |
LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {
   |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds
   |                                 |
   |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:18:50
   |
LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }
   |               ----                               ^ ...is captured here...
   |               |
   |               this data with the anonymous lifetime `'_`...
   |
note: ...and required to be `'static` by this
  --> $DIR/must_outlive_least_region_or_bound.rs:18:41
   |
LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }
   |                                         ^^^^^^^^^^^
help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`
   |
LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }
   |                                      ^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:21:59
   |
LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }
   |                     -------                               ^ ...is captured here...
   |                     |
   |                     this data with lifetime `'a`...
   |
note: ...and required to be `'static` by this
  --> $DIR/must_outlive_least_region_or_bound.rs:21:50
   |
LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }
   |                                                  ^^^^^^^^^^^
help: to permit non-static references in a trait object value, you can add an explicit bound for lifetime `'a`
   |
LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }
   |                                               ^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:24:60
   |
LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |               ----                                         ^ ...is captured here...
   |               |
   |               this data with the anonymous lifetime `'_`...
   |
note: ...and required to be `'static` by this
  --> $DIR/must_outlive_least_region_or_bound.rs:24:51
   |
LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |                                                   ^^^^^^^^^^^
help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`
   |
LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }
   |                                        ^^
help: alternatively, set an explicit `'static` lifetime in this parameter
   |
LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |               ^^^^^^^^^^^^

error: cannot infer an appropriate lifetime
  --> $DIR/must_outlive_least_region_or_bound.rs:27:69
   |
LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |                     ------- this data with lifetime `'a`...         ^ ...is captured here...
   |
note: ...and required to be `'static` by this
  --> $DIR/must_outlive_least_region_or_bound.rs:27:60
   |
LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |                                                            ^^^^^^^^^^^
help: consider changing the trait object's explicit `'static` bound to lifetime `'a`
   |
LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }
   |                                                 ^^
help: alternatively, set an explicit `'static` lifetime in this parameter
   |
LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }
   |                     ^^^^^^^^^^^^

error: aborting due to 12 previous errors

Some errors have detailed explanations: E0310, E0621, E0623.
For more information about an error, try `rustc --explain E0310`.
