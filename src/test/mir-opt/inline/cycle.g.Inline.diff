- // MIR for `g` before Inline
+ // MIR for `g` after Inline
  
  fn g() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:9:8: 9:8
      let _1: ();                          // in scope 0 at $DIR/cycle.rs:10:5: 10:12
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:10:5: 10:12
          _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:10:5: 10:12
                                           // mir::Constant
                                           // + span: $DIR/cycle.rs:10:5: 10:6
                                           // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }
                                           // mir::Constant
                                           // + span: $DIR/cycle.rs:10:7: 10:11
                                           // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:10:12: 10:13
          _0 = const ();                   // scope 0 at $DIR/cycle.rs:9:8: 11:2
          return;                          // scope 0 at $DIR/cycle.rs:11:2: 11:2
      }
  }
  
