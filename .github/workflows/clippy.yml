name: Clippy Test

on:
  push:
    # Ignore bors branches, since they are covered by `clippy_bors.yml`
    branches-ignore: [auto, try]
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
    - 'COPYRIGHT'
    - 'LICENSE-*'
    - '**.md'
    - '**.txt'
  pull_request:
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
    - 'COPYRIGHT'
    - 'LICENSE-*'
    - '**.md'
    - '**.txt'

env:
  RUST_BACKTRACE: 1
  CARGO_TARGET_DIR: '${{ github.workspace }}/target'
  GHA_CI: 1

jobs:
  base:
    runs-on: ubuntu-latest

    steps:
    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master
      with:
        github_token: "${{ secrets.github_token }}"
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.3
      with:
        toolchain: nightly
        target: x86_64-unknown-linux-gnu
        profile: minimal
    - name: Cache cargo dir
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-x86_64-unknown-linux-gnu
    - name: Checkout
      uses: actions/checkout@v2.0.0
    - name: Master Toolchain Setup
      run: bash setup-toolchain.sh

    - name: Set LD_LIBRARY_PATH (Linux)
      run: |
        SYSROOT=$(rustc --print sysroot)
        echo "::set-env name=LD_LIBRARY_PATH::${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}"
    - name: Build
      run: cargo build --features deny-warnings
    - name: Test
      run: cargo test --features deny-warnings
    - name: Test clippy_lints
      run: cargo test --features deny-warnings
      working-directory: clippy_lints
    - name: Test rustc_tools_util
      run: cargo test --features deny-warnings
      working-directory: rustc_tools_util
    - name: Test clippy_dev
      run: cargo test --features deny-warnings
      working-directory: clippy_dev
    - name: Test cargo-clippy
      run: ../target/debug/cargo-clippy
      working-directory: clippy_workspace_tests
    - name: Test clippy-driver
      run: |
        (
          set -ex
          # Check sysroot handling
          sysroot=$(./target/debug/clippy-driver --print sysroot)
          test "$sysroot" = "$(rustc --print sysroot)"

          desired_sysroot=/tmp
          sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)
          test "$sysroot" = $desired_sysroot

          sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)
          test "$sysroot" = $desired_sysroot

          # Make sure this isn't set - clippy-driver should cope without it
          unset CARGO_MANIFEST_DIR

          # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1
          # FIXME: How to match the clippy invocation in compile-test.rs?
          ./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1
          sed -e 's,tests/ui,$DIR,' -e '/= help/d' cstring.stderr > normalized.stderr
          diff normalized.stderr tests/ui/cstring.stderr

          # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR
        )

    - name: Run cargo-cache --autoclean
      run: |
        cargo install cargo-cache --debug
        find ~/.cargo/bin ! -type d -exec strip {} \;
        cargo cache --autoclean
