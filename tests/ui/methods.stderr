error: unnecessary structure name repetition
  --> $DIR/methods.rs:20:25
   |
20 |     fn add(self, other: T) -> T { self }
   |                         ^ help: use the applicable keyword: `Self`
   |
   = note: `-D use-self` implied by `-D warnings`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:20:31
   |
20 |     fn add(self, other: T) -> T { self }
   |                               ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:23:26
   |
23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref
   |                          ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:23:33
   |
23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref
   |                                 ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:24:21
   |
24 |     fn div(self) -> T { self } // no error, different #arguments
   |                     ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:25:25
   |
25 |     fn rem(self, other: T) { } // no error, wrong return type
   |                         ^ help: use the applicable keyword: `Self`

error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name
  --> $DIR/methods.rs:20:5
   |
20 |     fn add(self, other: T) -> T { self }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D should-implement-trait` implied by `-D warnings`

error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name
  --> $DIR/methods.rs:21:5
   |
21 |     fn drop(&mut self) { }
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name
  --> $DIR/methods.rs:28:17
   |
28 |     fn into_u16(&self) -> u16 { 0 }
   |                 ^^^^^
   |
   = note: `-D wrong-self-convention` implied by `-D warnings`

error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name
  --> $DIR/methods.rs:30:21
   |
30 |     fn to_something(self) -> u32 { 0 }
   |                     ^^^^

error: methods called `new` usually take no self; consider choosing a less ambiguous name
  --> $DIR/methods.rs:32:12
   |
32 |     fn new(self) {}
   |            ^^^^

error: methods called `new` usually return `Self`
  --> $DIR/methods.rs:32:5
   |
32 |     fn new(self) {}
   |     ^^^^^^^^^^^^^^^
   |
   = note: `-D new-ret-no-self` implied by `-D warnings`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:76:24
   |
76 |     fn new() -> Option<V<T>> { None }
   |                        ^^^^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:80:19
   |
80 |     type Output = T;
   |                   ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:81:25
   |
81 |     fn mul(self, other: T) -> T { self } // no error, obviously
   |                         ^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
  --> $DIR/methods.rs:81:31
   |
81 |     fn mul(self, other: T) -> T { self } // no error, obviously
   |                               ^ help: use the applicable keyword: `Self`

error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead
   --> $DIR/methods.rs:99:13
    |
99  |       let _ = opt.map(|x| x + 1)
    |  _____________^
100 | |
101 | |                .unwrap_or(0); // should lint even though this call is on a separate line
    | |____________________________^
    |
    = note: `-D option-map-unwrap-or` implied by `-D warnings`
    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`

error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead
   --> $DIR/methods.rs:103:13
    |
103 |       let _ = opt.map(|x| {
    |  _____________^
104 | |                         x + 1
105 | |                     }
106 | |               ).unwrap_or(0);
    | |____________________________^

error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead
   --> $DIR/methods.rs:107:13
    |
107 |       let _ = opt.map(|x| x + 1)
    |  _____________^
108 | |                .unwrap_or({
109 | |                     0
110 | |                 });
    | |__________________^

error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead
   --> $DIR/methods.rs:112:13
    |
112 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`

error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead
   --> $DIR/methods.rs:114:13
    |
114 |       let _ = opt.map(|x| {
    |  _____________^
115 | |         Some(x + 1)
116 | |     }
117 | |     ).unwrap_or(None);
    | |_____________________^

error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead
   --> $DIR/methods.rs:118:13
    |
118 |       let _ = opt
    |  _____________^
119 | |         .map(|x| Some(x + 1))
120 | |         .unwrap_or(None);
    | |________________________^
    |
    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`

error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead
   --> $DIR/methods.rs:126:13
    |
126 |       let _ = opt.map(|x| x + 1)
    |  _____________^
127 | |
128 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line
    | |____________________________________^
    |
    = note: `-D option-map-unwrap-or-else` implied by `-D warnings`
    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`

error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead
   --> $DIR/methods.rs:130:13
    |
130 |       let _ = opt.map(|x| {
    |  _____________^
131 | |                         x + 1
132 | |                     }
133 | |               ).unwrap_or_else(|| 0);
    | |____________________________________^

error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead
   --> $DIR/methods.rs:134:13
    |
134 |       let _ = opt.map(|x| x + 1)
    |  _____________^
135 | |                .unwrap_or_else(||
136 | |                     0
137 | |                 );
    | |_________________^

error: unnecessary structure name repetition
   --> $DIR/methods.rs:163:24
    |
163 |     fn filter(self) -> IteratorFalsePositives {
    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
   --> $DIR/methods.rs:167:22
    |
167 |     fn next(self) -> IteratorFalsePositives {
    |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`

error: unnecessary structure name repetition
   --> $DIR/methods.rs:187:32
    |
187 |     fn skip(self, _: usize) -> IteratorFalsePositives {
    |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`

error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.
   --> $DIR/methods.rs:197:13
    |
197 |     let _ = v.iter().filter(|&x| *x < 0).next();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D filter-next` implied by `-D warnings`
    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`

error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.
   --> $DIR/methods.rs:200:13
    |
200 |       let _ = v.iter().filter(|&x| {
    |  _____________^
201 | |                                 *x < 0
202 | |                             }
203 | |                    ).next();
    | |___________________________^

error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:215:13
    |
215 |     let _ = v.iter().find(|&x| *x < 0).is_some();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D search-is-some` implied by `-D warnings`
    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`

error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:218:13
    |
218 |       let _ = v.iter().find(|&x| {
    |  _____________^
219 | |                               *x < 0
220 | |                           }
221 | |                    ).is_some();
    | |______________________________^

error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:224:13
    |
224 |     let _ = v.iter().position(|&x| x < 0).is_some();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`

error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:227:13
    |
227 |       let _ = v.iter().position(|&x| {
    |  _____________^
228 | |                                   x < 0
229 | |                               }
230 | |                    ).is_some();
    | |______________________________^

error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:233:13
    |
233 |     let _ = v.iter().rposition(|&x| x < 0).is_some();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`

error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.
   --> $DIR/methods.rs:236:13
    |
236 |       let _ = v.iter().rposition(|&x| {
    |  _____________^
237 | |                                    x < 0
238 | |                                }
239 | |                    ).is_some();
    | |______________________________^

error: unnecessary structure name repetition
   --> $DIR/methods.rs:253:21
    |
253 |         fn new() -> Foo { Foo }
    |                     ^^^ help: use the applicable keyword: `Self`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:271:5
    |
271 |     with_constructor.unwrap_or(make());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`
    |
    = note: `-D or-fun-call` implied by `-D warnings`

error: use of `unwrap_or` followed by a call to `new`
   --> $DIR/methods.rs:274:5
    |
274 |     with_new.unwrap_or(Vec::new());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:277:5
    |
277 |     with_const_args.unwrap_or(Vec::with_capacity(12));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:280:5
    |
280 |     with_err.unwrap_or(make());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:283:5
    |
283 |     with_err_args.unwrap_or(Vec::with_capacity(12));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`

error: use of `unwrap_or` followed by a call to `default`
   --> $DIR/methods.rs:286:5
    |
286 |     with_default_trait.unwrap_or(Default::default());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`

error: use of `unwrap_or` followed by a call to `default`
   --> $DIR/methods.rs:289:5
    |
289 |     with_default_type.unwrap_or(u64::default());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:292:5
    |
292 |     with_vec.unwrap_or(vec![]);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:297:5
    |
297 |     without_default.unwrap_or(Foo::new());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`

error: use of `or_insert` followed by a function call
   --> $DIR/methods.rs:300:5
    |
300 |     map.entry(42).or_insert(String::new());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`

error: use of `or_insert` followed by a function call
   --> $DIR/methods.rs:303:5
    |
303 |     btree.entry(42).or_insert(String::new());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`

error: use of `unwrap_or` followed by a function call
   --> $DIR/methods.rs:306:13
    |
306 |     let _ = stringy.unwrap_or("".to_owned());
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| "".to_owned())`

error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable
   --> $DIR/methods.rs:317:23
    |
317 |         let bad_vec = some_vec.iter().nth(3);
    |                       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D iter-nth` implied by `-D warnings`

error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable
   --> $DIR/methods.rs:318:26
    |
318 |         let bad_slice = &some_vec[..].iter().nth(3);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable
   --> $DIR/methods.rs:319:31
    |
319 |         let bad_boxed_slice = boxed_slice.iter().nth(3);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable
   --> $DIR/methods.rs:320:29
    |
320 |         let bad_vec_deque = some_vec_deque.iter().nth(3);
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable
   --> $DIR/methods.rs:325:23
    |
325 |         let bad_vec = some_vec.iter_mut().nth(3);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable
   --> $DIR/methods.rs:328:26
    |
328 |         let bad_slice = &some_vec[..].iter_mut().nth(3);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable
   --> $DIR/methods.rs:331:29
    |
331 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`
   --> $DIR/methods.rs:343:13
    |
343 |     let _ = some_vec.iter().skip(42).next();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D iter-skip-next` implied by `-D warnings`

error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`
   --> $DIR/methods.rs:344:13
    |
344 |     let _ = some_vec.iter().cycle().skip(42).next();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`
   --> $DIR/methods.rs:345:13
    |
345 |     let _ = (1..10).skip(10).next();
    |             ^^^^^^^^^^^^^^^^^^^^^^^

error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`
   --> $DIR/methods.rs:346:14
    |
346 |     let _ = &some_vec[..].iter().skip(3).next();
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:372:17
    |
372 |         let _ = boxed_slice.get(1).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`
    |
    = note: `-D get-unwrap` implied by `-D warnings`

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:373:17
    |
373 |         let _ = some_slice.get(0).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`

error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:374:17
    |
374 |         let _ = some_vec.get(0).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`

error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:375:17
    |
375 |         let _ = some_vecdeque.get(0).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`

error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:376:17
    |
376 |         let _ = some_hashmap.get(&1).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`

error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:377:17
    |
377 |         let _ = some_btreemap.get(&1).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:382:10
    |
382 |         *boxed_slice.get_mut(0).unwrap() = 1;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:383:10
    |
383 |         *some_slice.get_mut(0).unwrap() = 1;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`

error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:384:10
    |
384 |         *some_vec.get_mut(0).unwrap() = 1;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`

error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
   --> $DIR/methods.rs:385:10
    |
385 |         *some_vecdeque.get_mut(0).unwrap() = 1;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`

error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message
   --> $DIR/methods.rs:399:13
    |
399 |     let _ = opt.unwrap();
    |             ^^^^^^^^^^^^
    |
    = note: `-D option-unwrap-used` implied by `-D warnings`

error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message
   --> $DIR/methods.rs:402:13
    |
402 |     let _ = res.unwrap();
    |             ^^^^^^^^^^^^
    |
    = note: `-D result-unwrap-used` implied by `-D warnings`

error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`
   --> $DIR/methods.rs:404:5
    |
404 |     res.ok().expect("disaster!");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D ok-expect` implied by `-D warnings`

error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`
   --> $DIR/methods.rs:410:5
    |
410 |     res3.ok().expect("whoof");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`
   --> $DIR/methods.rs:412:5
    |
412 |     res4.ok().expect("argh");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`
   --> $DIR/methods.rs:414:5
    |
414 |     res5.ok().expect("oops");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`
   --> $DIR/methods.rs:416:5
    |
416 |     res6.ok().expect("meh");
    |     ^^^^^^^^^^^^^^^^^^^^^^^

